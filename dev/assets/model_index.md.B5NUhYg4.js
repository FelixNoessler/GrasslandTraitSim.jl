import{_ as l,c as o,j as a,a as i,G as e,a5 as n,B as r,o as d}from"./chunks/framework.DUg_Vbhg.js";const T=JSON.parse('{"title":"Difference equation","description":"","frontmatter":{},"headers":[],"relativePath":"model/index.md","filePath":"model/index.md","lastUpdated":null}'),p={name:"model/index.md"},h={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""};function k(f,t,y,E,v,x){const s=r("Badge");return d(),o("div",null,[t[18]||(t[18]=a("h1",{id:"Difference-equation",tabindex:"-1"},[i("Difference equation "),a("a",{class:"header-anchor",href:"#Difference-equation","aria-label":'Permalink to "Difference equation {#Difference-equation}"'},"​")],-1)),t[19]||(t[19]=a("p",null,[i("The main function to solve the difference equations and get the solution with all parameters is "),a("a",{href:"/GrasslandTraitSim.jl/dev/model/index#GrasslandTraitSim.solve_prob"},"solve_prob"),i(".")],-1)),a("details",h,[a("summary",null,[t[0]||(t[0]=a("a",{id:"GrasslandTraitSim.solve_prob",href:"#GrasslandTraitSim.solve_prob"},[a("span",{class:"jlbinding"},"GrasslandTraitSim.solve_prob")],-1)),t[1]||(t[1]=i()),e(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[2]||(t[2]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve_prob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_obj,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prealloc,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prealloc_specific,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trait_input,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    θ_type,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    callback</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Solve the model for one site.</p><p>Intialize the parameters, the state variables and the output vectors (see <a href="/GrasslandTraitSim.jl/dev/model/index#GrasslandTraitSim.initialization"><code>initialization</code></a>).</p><p>In addition some vectors are preallocated to avoid allocations in the main loop. Then, run the main loop and store the results with all parameters in a container.</p><p>All input variables are explained in a tutorial: <a href="/GrasslandTraitSim.jl/dev/tutorials/how_to_prepare_input#How-to-prepare-the-input-data-to-start-a-simulation">How to prepare the input data to start a simulation</a></p><p>There is also a tutorial on the model output: <a href="/GrasslandTraitSim.jl/dev/tutorials/how_to_analyse_output#How-to-analyse-the-model-output">How to analyse the model output</a></p><p><a href="https://github.com/FelixNoessler/GrasslandTraitSim.jl/blob/55153ae806ad17d52f13040cbbdb00b5eadba6f0/src/main_functions.jl#L1" target="_blank" rel="noreferrer">source</a></p>`,7))]),t[20]||(t[20]=a("h2",{id:"initialization",tabindex:"-1"},[i("Initialization "),a("a",{class:"header-anchor",href:"#initialization","aria-label":'Permalink to "Initialization"'},"​")],-1)),a("details",c,[a("summary",null,[t[3]||(t[3]=a("a",{id:"GrasslandTraitSim.initialization",href:"#GrasslandTraitSim.initialization"},[a("span",{class:"jlbinding"},"GrasslandTraitSim.initialization")],-1)),t[4]||(t[4]=i()),e(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[5]||(t[5]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_obj,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prealloc,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prealloc_specific,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trait_input,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    callback</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Initialize the simulation object. The function is called once at the beginning of the simulation within <a href="/GrasslandTraitSim.jl/dev/model/index#GrasslandTraitSim.solve_prob"><code>solve_prob</code></a>.</p><p><a href="https://github.com/FelixNoessler/GrasslandTraitSim.jl/blob/55153ae806ad17d52f13040cbbdb00b5eadba6f0/src/2_initialisation/3_initialisation.jl#L1" target="_blank" rel="noreferrer">source</a></p>`,3))]),a("details",g,[a("summary",null,[t[6]||(t[6]=a("a",{id:"GrasslandTraitSim.set_initialconditions!",href:"#GrasslandTraitSim.set_initialconditions!"},[a("span",{class:"jlbinding"},"GrasslandTraitSim.set_initialconditions!")],-1)),t[7]||(t[7]=i()),e(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[8]||(t[8]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_initialconditions!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; container)</span></span></code></pre></div><p>Set the initial conditions for the state variables.</p><p>Each plant species (<code>u_biomass</code>) gets an equal share of the initial biomass (<code>initbiomass</code>). The soil water content (<code>u_water</code>) is set to 180 mm. The height is set to half of the maximum height of the species. The above- and belowground biomass (<code>u_above_biomass</code>, <code>u_below_biomass</code>) are calculated based on the aboveground biomass proportion (<code>abp</code>).</p><ul><li><p><code>u_biomass</code>: state variable biomass [kg ha⁻¹]</p></li><li><p><code>u_water</code>: state variable soil water content [mm]</p></li><li><p><code>u_height</code>: state variable height [m]</p></li><li><p><code>u_above_biomass</code>: state variable aboveground biomass [kg ha⁻¹]</p></li><li><p><code>u_below_biomass</code>: state variable belowground biomass [kg ha⁻¹]</p></li><li><p><code>initbiomass</code>: initial biomass [kg ha⁻¹]</p></li><li><p><code>initsoilwater</code>: initial soil water content [mm]</p></li><li><p><code>height</code>: potential height of the species [m]</p></li><li><p><code>abp</code>: aboveground biomass proportion [-]</p></li></ul><p><a href="https://github.com/FelixNoessler/GrasslandTraitSim.jl/blob/55153ae806ad17d52f13040cbbdb00b5eadba6f0/src/2_initialisation/3_initialisation.jl#L34" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",b,[a("summary",null,[t[9]||(t[9]=a("a",{id:"GrasslandTraitSim.random_traits!",href:"#GrasslandTraitSim.random_traits!"},[a("span",{class:"jlbinding"},"GrasslandTraitSim.random_traits!")],-1)),t[10]||(t[10]=i()),e(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[11]||(t[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">random_traits!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; container)</span></span></code></pre></div><p>Generate random traits for the simulation.</p><p>The traits are generated using a bivariate Gaussian mixture model with full covariance matrices. For each species either the first or the second Gaussian distribution is used to generate the log/logit-transformed traits. The traits are then backtransformed to the original scale and the units are added. If the proportion of the leaf mass of the total plant mass (<code>lbp</code>) is larger than 0.95 % of the proportion of the aboveground mass of the total mass (<code>abp</code>), <code>lbp</code> is set to 0.95 % of <code>abp</code>.</p><p>The Gaussian mixture model was fitted to the data with the function <code>BayesianGaussianMixture</code> of [<a href="/GrasslandTraitSim.jl/dev/references#scikit-learn">1</a>].</p><p>Overview of the traits:</p><table tabindex="0"><thead><tr><th style="text-align:right;">trait</th><th style="text-align:right;">unit</th><th style="text-align:right;">description</th><th style="text-align:right;">transformation</th></tr></thead><tbody><tr><td style="text-align:right;"><code>sla</code></td><td style="text-align:right;">m² g⁻¹</td><td style="text-align:right;">specific leaf area</td><td style="text-align:right;">log</td></tr><tr><td style="text-align:right;"><code>height</code></td><td style="text-align:right;">m</td><td style="text-align:right;">plant height</td><td style="text-align:right;">log</td></tr><tr><td style="text-align:right;"><code>lnc</code></td><td style="text-align:right;">mg g⁻¹</td><td style="text-align:right;">leaf nitrogen content per leaf dry mass</td><td style="text-align:right;">log</td></tr><tr><td style="text-align:right;"><code>srsa</code></td><td style="text-align:right;">m² g⁻¹</td><td style="text-align:right;">root surface area per aboveground biomass</td><td style="text-align:right;">log</td></tr><tr><td style="text-align:right;"><code>amc</code></td><td style="text-align:right;">-</td><td style="text-align:right;">arbuscular mycorrhizal colonisation rate</td><td style="text-align:right;">logit</td></tr><tr><td style="text-align:right;"><code>abp</code></td><td style="text-align:right;">-</td><td style="text-align:right;">aboveground dry mass per plant dry mass</td><td style="text-align:right;">logit</td></tr><tr><td style="text-align:right;"><code>lbp</code></td><td style="text-align:right;">-</td><td style="text-align:right;">leaf dry mass per plant dry mass</td><td style="text-align:right;">logit</td></tr></tbody></table><p><a href="https://github.com/FelixNoessler/GrasslandTraitSim.jl/blob/55153ae806ad17d52f13040cbbdb00b5eadba6f0/src/2_initialisation/5_traits.jl#L12" target="_blank" rel="noreferrer">source</a></p>',7))]),t[21]||(t[21]=a("h2",{id:"Main-loop",tabindex:"-1"},[i("Main loop "),a("a",{class:"header-anchor",href:"#Main-loop","aria-label":'Permalink to "Main loop {#Main-loop}"'},"​")],-1)),a("details",u,[a("summary",null,[t[12]||(t[12]=a("a",{id:"GrasslandTraitSim.main_loop!",href:"#GrasslandTraitSim.main_loop!"},[a("span",{class:"jlbinding"},"GrasslandTraitSim.main_loop!")],-1)),t[13]||(t[13]=i()),e(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[14]||(t[14]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">main_loop!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; container)</span></span></code></pre></div><p>Run the main loop for all days.</p><p>Calls the function <a href="/GrasslandTraitSim.jl/dev/model/index#GrasslandTraitSim.one_day!"><code>one_day!</code></a> for each day and set the calculated density differences to the output variables.</p><p><a href="https://github.com/FelixNoessler/GrasslandTraitSim.jl/blob/55153ae806ad17d52f13040cbbdb00b5eadba6f0/src/main_functions.jl#L51" target="_blank" rel="noreferrer">source</a></p>',4))]),a("details",m,[a("summary",null,[t[15]||(t[15]=a("a",{id:"GrasslandTraitSim.one_day!",href:"#GrasslandTraitSim.one_day!"},[a("span",{class:"jlbinding"},"GrasslandTraitSim.one_day!")],-1)),t[16]||(t[16]=i()),e(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[17]||(t[17]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">one_day!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; t, container)</span></span></code></pre></div><p>Calculate differences of all state variables for one time step (one day).</p><p><a href="https://github.com/FelixNoessler/GrasslandTraitSim.jl/blob/55153ae806ad17d52f13040cbbdb00b5eadba6f0/src/one_day.jl#L14" target="_blank" rel="noreferrer">source</a></p>',3))])])}const _=l(p,[["render",k]]);export{T as __pageData,_ as default};
