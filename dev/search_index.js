var documenterSearchIndex = {"docs":
[{"location":"Modelling_API/main_equations/","page":"Difference equation","title":"Difference equation","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/main_equations/#Difference-equation","page":"Difference equation","title":"Difference equation","text":"","category":"section"},{"location":"Modelling_API/main_equations/","page":"Difference equation","title":"Difference equation","text":"The main function to solve the difference equations and get the solution with all parameters is solve_prob.","category":"page"},{"location":"Modelling_API/main_equations/","page":"Difference equation","title":"Difference equation","text":"solve_prob","category":"page"},{"location":"Modelling_API/main_equations/#GrasslandTraitSim.solve_prob","page":"Difference equation","title":"GrasslandTraitSim.solve_prob","text":"solve_prob(\n;\n    input_obj,\n    p,\n    prealloc,\n    prealloc_specific,\n    trait_input,\n    θ_type,\n    callback\n)\n\n\nSolve the model for one site.\n\nIntialize the parameters, the state variables and the output vectors (see initialization).\n\nIn addition some vectors are preallocated to avoid allocations in the main loop. Then, run the main loop and store the results with all parameters in a container.\n\nAll input variables are explained in a tutorial: How to prepare the input data to start a simulation\n\nThere is also a tutorial on the model output: How to analyse the model output\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/main_equations/#Main-loop","page":"Difference equation","title":"Main loop","text":"","category":"section"},{"location":"Modelling_API/main_equations/","page":"Difference equation","title":"Difference equation","text":"main_loop!\none_day!","category":"page"},{"location":"Modelling_API/main_equations/#GrasslandTraitSim.main_loop!","page":"Difference equation","title":"GrasslandTraitSim.main_loop!","text":"main_loop!(; container)\n\n\nRun the main loop for all days.\n\nCalls the function one_day! for each day and set the calculated density differences to the output variables.\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/main_equations/#GrasslandTraitSim.one_day!","page":"Difference equation","title":"GrasslandTraitSim.one_day!","text":"one_day!(; t, container)\n\n\nCalculate differences of all state variables for one day.\n\nBiomass change during one day\n\nB_t+1xys = B_txys + G_act txys - S_txys - M_txys\n\nB_txys biomass of species s at time t and patch xy [kg ha⁻¹]\noutput is stored in output.biomass_txys, current state in   u.u_biomass_xys, change of biomass in u.du_biomass_xys\nG_act txys actual growth of species s at time t and patch xy [kg ha⁻¹]\ncalc.act_growth_s is then directly added to u.du_biomass for each patch\nS_txys senescence of species s at patch xy [kg ha⁻¹]\ncalc.senescence_s is then directly added to u.du_biomass for each patch\nM_txys defoliation due to management of species s at time t at patch   xy [kg ha⁻¹]\ncalc.defoliation_s is then directly added to u.du_biomass for each patch\n\nNote: for an overview of all biomass processes, see Biomass dynamics\n\nSoil water change during one day\n\nW_t+1xy = W_txy + P_txy - AET_txy - R_txy\n\nW_txy: soil water content at time t at patch xy [mm]\noutput is stored in output.water_txy, current state in u.u_water_xy,   change of water in u.du_water_xy\nP_txy: precipitation at time t at patch xy [mm]\ninput.precipitation_txy\nAET_txy: actual evapotranspiration at time t at patch xy [mm]\nAET in change_water_reserve\nR_txy: surface run-off and drainage of water from the soil at time t   at patch xy [mm]\ndrain in change_water_reserve\n\nNote: for more details see change_water_reserve\n\nMain procedure (in the following order)\n\nif npatches > 1\n\nclonal growth at day of the year = 250\n\nloop over patches:\n\nset very low or negative biomass (< 1e-30 kg ha⁻¹) to zero\ndefoliation (mowing, grazing)\ngrowth\nsenescence\nsoil water dynamics\n\n\n\n\n\n","category":"function"},{"location":"parameter/","page":"Parameter","title":"Parameter","text":"CurrentModule = GrasslandTraitSim","category":"page"},{"location":"parameter/#Parameter","page":"Parameter","title":"Parameter","text":"","category":"section"},{"location":"parameter/#Model-Parameter","page":"Parameter","title":"Model Parameter","text":"","category":"section"},{"location":"parameter/","page":"Parameter","title":"Parameter","text":"SimulationParameter","category":"page"},{"location":"parameter/#GrasslandTraitSim.SimulationParameter","page":"Parameter","title":"GrasslandTraitSim.SimulationParameter","text":"SimulationParameter(; kwargs...)\n\nHere is an overview of the parameters that are used in the model. In addition to the parameters listed here, a regression equation with parameters not listed here from [1] is used to derive the water holding capacity and the permanent wilting point (see input_WHC_PWP!).\n\nLight interception and competition\n\nParameter Symbol Value Description\nRUE_max RUE_max 0.003 kg MJ^-1 Maximal radiation use efficiency, see potential_growth!\nk k 0.6 Extinction coefficient, see potential_growth!\nself_shading_severity alpha_\textshading 0.75 TODO, see potential_growth!\nβ_height beta_H 0.5 controls how strongly taller plants gets more light for growth, see light_competition!\n\nBelowground competition\n\nParameter Symbol Value Description\nR_wrsa_04_Lolium textwater-red-SRSA-Lolium 0.95 TODO; water growth reducer for Lolium perenne at 0.4 scaled soil water content see water_reduction!\nRSA_per_totalbiomass_Lolium textSRSA-Lolium 0.07832 m^2 g^-1 TODO fixed value for Lolium perenne see water_reduction!\nRSA_per_totalbiomass_influence textRSA-per-totalbiomass-influence 1.0 TODO see water_reduction!\nR_wrsa_04_min eta_min wrsa 0.0 TODO see water_reduction!\nR_wrsa_04_max eta_max wrsa 1.0 TODO see water_reduction!\nβ_wrsa beta_wrsa 7.0 part of the growth reducer based on the root surface area per aboveground biomass and the water stress function W_srsa txys; slope of the logistic function, controls how steep the transition from 1-delta_wrsa to K_wrsa s is, see water_reduction!\nN_max N_max 35.0 g kg^-1 maximal total soil nitrogen, based on the maximum total N of ≈ 30.63 [g kg⁻¹] in the data from the Biodiversity Exploratories [2][3][4][5], see input_nutrients!\nTSB_max TSB_max 18000.0 kg ha^-1 TODO, see below_ground_competition!\nTSB_k TSB_k 0.001 ha kg^-1 TODO, see below_ground_competition!\nnutadj_max nutadj_max 3.0 TODO, see below_ground_competition!\nδ_amc delta_amc 0.5 part of the growth reducer based on the arbuscular mycorrhizal colonization rate and the nutrient stress function N_amc txys; maximal possible growth reduction, see nutrient_reduction!\nβ_amc beta_amc 7.0 part of the growth reducer based on the arbuscular mycorrhizal colonization rate and the nutrient stress function N_amc txys; slope of a logistic function that calculates the growth reducer N_amc txys, see nutrient_reduction!\nβ_red_amc beta_textred amc 25.0 TODO\nβ_red_rsa beta_textred srsa 70.0 g m^-2 TODO\nκ_maxred_amc kappa_textmaxred amc 0.02 TODO\nκ_maxred_srsa kappa_textmaxred srsa 0.02 TODO\nβ_η_amc beta_eta amc 10.0 part of the growth reducer based on the arbuscular mycorrhizal colonization rate and the nutrient stress function N_amc txys; is the slope of the two logistic functions that relate the arbuscular mycorrhizal colonization rate to K_amc s and A_amc s, see nutrient_reduction!\nη_μ_amc eta_min amc 0.5 part of the growth reducer based on the arbuscular mycorrhizal colonization rate and the nutrient stress function N_amc txys; ... TODO ... A_amc s, see nutrient_reduction!\nη_σ_amc eta_sigma amc 0.5 part of the growth reducer based on the arbuscular mycorrhizal colonization rate and the nutrient stress function N_amc txys; ... TODO ... A_amc s, see nutrient_reduction!\nϕ_amc phi_amc 0.03 part of the growth reducer based on the arbuscular mycorrhizal colonization rate and the nutrient stress function N_amc txys; is the arbuscular mycorrhizal colonization rate where the species have values of A_amc s and K_amc s that are halfway between the minimum and the maximum of A_amc s and K_amc s, see nutrient_reduction!\nϕ_rsa phi_srsa 0.07 m^2 g^-1 part of the growth reducer based on the root surface area per aboveground biomass and the water stress function W_srsa txys and the nutrient stress function N_srsa txys; is the root surface area per aboveground biomass area where the species have values of A_wrsa s (A_nrsa s) and K_wrsa s (K_nrsa s) that are halfway between the minimum and the maximum of A_wrsa s (A_nrsa s) and K_wrsa s (K_nrsa s), see water_reduction!\nδ_nrsa delta_nrsa 0.2 part of the growth reducer based on the root surface area per aboveground biomass and the nutrient stress function N_srsa txys; maximal growth reduction, see nutrient_reduction!\nβ_nrsa beta_nrsa 7.0 part of the growth reducer based on the root surface area per aboveground biomass and the nutrient stress function N_srsa txys; slope of a logistic function that calculates the growth reducer N_srsa txys, see nutrient_reduction!\nβ_η_nrsa beta_eta nrsa 100.0 g m^-2 part of the growth reducer based on the root surface area per aboveground biomass and the nutrient stress function N_srsa txys; is the slope of the two logistic functions that relate the root surface area per aboveground biomass to K_nrsa s and A_nrsa s, see nutrient_reduction!\nη_μ_nrsa eta_mu nrsa 0.5 part of the growth reducer based on the root surface area per aboveground biomass and the nutrient stress function N_srsa txys; ... TODO ... A_nrsa s, see nutrient_reduction!\nη_σ_nrsa eta_sigma nrsa 0.5 part of the growth reducer based on the root surface area per aboveground biomass and the nutrient stress function N_srsa txys;... TODO ... A_nrsa s, see nutrient_reduction!\n\nEnvironmental and seasonal growth adjustment\n\nParameter Symbol Value Description\nγ₁ gamma_1 4.45e-6 ha MJ^-1 controls the steepness of the linear decrease in radiation use efficiency for high values of the photosynthetically active radiation (PAR), see radiation_reduction!\nγ₂ gamma_2 50000.0 MJ ha^-1 threshold value of PAR from which starts a linear decrease in radiation use efficiency, see radiation_reduction!\nT₀ T_0 4.0 °C TODO, see temperature_reduction!\nT₁ T_1 10.0 °C TODO, see temperature_reduction!\nT₂ T_2 20.0 °C TODO, see temperature_reduction!\nT₃ T_3 35.0 °C TODO, see temperature_reduction!\nST₁ ST_1 775.0 °C is a threshold of the temperature degree days, above which the seasonality factor is set to SEA_min and descreases to SEA_max, see seasonal_reduction!\nST₂ ST_2 1450.0 °C is a threshold of the temperature degree-days, where the seasonality growth factor is set to SEA_min, see seasonal_reduction!\nSEA_min SEA_min 0.7 is the minimal value of the seasonal effect, see seasonal_reduction!\nSEA_max SEA_max 1.3 is the maximal value of the seasonal effect, see seasonal_reduction!\n\nSenescence\n\nParameter Symbol Value Description\nα_sen alpha_SEN 0.001 senescence rate-intercept of a linear equation that relate the leaf life span to the senescence rate, see senescence_rate!\nϕ_sen_sla phi_sen sla 0.009 m^2 g^-1 TODO, see water_reduction!\nβ_sen_sla beta_SEN 0.3 TODO see senescence_rate!\nΨ₁ Ψ_1 775.0 °C temperature threshold: senescence starts to increase, see seasonal_component_senescence\nΨ₂ Ψ_2 3000.0 °C temperature threshold: senescence reaches maximum, see seasonal_component_senescence\nSEN_max SEN_max 3.0 maximal seasonality factor for the senescence rate, see seasonal_component_senescence\n\nManagement\n\nParameter Symbol Value Description\nβ_PAL_lnc beta_PAL lnc 1.2 controls how strongly grazers prefer plant species with high leaf nitrogen content, see grazing!\nη_GRZ eta_GRZ 25.0 defines with  κ · livestock density the aboveground biomass [kg ha⁻¹] when the daily consumption by grazers reaches half of their maximal consumption, see grazing!\nκ kappa 22.0 kg maximal consumption of a livestock unit per day, see grazing!\n\nClonal growth\n\nParameter Symbol Value Description\nβ_clo beta_clo 0.1 Proportion of biomass that growths to the neighbouring cells, see clonalgrowth!\n\nWater dynamics\n\nParameter Symbol Value Description\nα_TR_sla alpha_TR sla 0.03 m^2 g^-1 reference community weighted mean specific leaf area, if the community weighted mean specific leaf area is equal to α_TR_sla then transpiration is neither increased nor decreased, see transpiration](@ref)\nβ_TR_sla beta_TR sla 0.4 controls how strongly a community mean specific leaf area that deviates from α_TR_sla is affecting the transpiration, see transpiration\n\n\n\n\n\n","category":"type"},{"location":"parameter/#Simulation-settings","page":"Parameter","title":"Simulation settings","text":"","category":"section"},{"location":"parameter/","page":"Parameter","title":"Parameter","text":"Parameter Description used in\nnspecies number of species (plant functional types) -\nnpatches number of quadratic patches within one site -\ntrait_seed seed for the generation of traits, if missing then seed is selected randomly random_traits!\nnutheterog heterogeneity of the nutrient availability within one site, only applicable if more than one patch is simulated per site input_nutrients!","category":"page"},{"location":"dashboard/#Dashboard","page":"Dashboard","title":"Dashboard","text":"","category":"section"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"The dashboard can be used to graphically check the calibration results. It shows the simulated total biomass, soil water content and the simulated community weighted mean traits for all grassland plots of the Biodiversity Exploratories.","category":"page"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"GLMakie.jl is used instead of CairoMakie.jl to make use of interactive features. What can be done:","category":"page"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"see simulation results for different grassland plots of the Biodiversity Exploratories with the plotID\nsample parameter values from the prior and in the future also from the posterior\nmanually change each parameter value, set Parameter to \"fixed (see right)\"\ndisable individual model components\nview different abiotic inputs (e.g. precipitation, air temperature)\nsee the log likelihood for the simulated community weighted traits and the cut aboveground biomass, it is compared to measured data from the Biodiversity Exploratories\ncalculate the gradient of each parameter with respect to the log likelihood \nshow the timing of the grazing and mowing in the biomass plot\nchange the time step of the simulation: 1, 7, or 14 days\nin all plots it is possible to zoom","category":"page"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"import GrasslandTraitSim as sim\nusing GLMakie\nGLMakie.activate!()\n\nsim.dashboard()","category":"page"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"<details>\n<summary>Code for generating static image for documentation</summary>","category":"page"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"import GrasslandTraitSim as sim\nusing CairoMakie\n\nsim.dashboard(; variable_p = sim.load_optim_result(), path = \"dashboard.png\")","category":"page"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"</details>","category":"page"},{"location":"dashboard/","page":"Dashboard","title":"Dashboard","text":"(Image: )","category":"page"},{"location":"all_functions/#Overview-of-all-functions","page":"TOC all functions","title":"Overview of all functions","text":"","category":"section"},{"location":"all_functions/","page":"TOC all functions","title":"TOC all functions","text":"","category":"page"},{"location":"create_all_doc_figures/#Create-all-figures-in-the-documentation","page":"Create all figures in documentation","title":"Create all figures in the documentation","text":"","category":"section"},{"location":"create_all_doc_figures/","page":"Create all figures in documentation","title":"Create all figures in documentation","text":"import GrasslandTraitSim as sim\n\n####### load fitted parameter values\n# θ = nothing\nθ = sim.load_optim_result()\n\n####### create images for the document\ndocs_img = \"img\"\nf(path; show_img = false) = show_img ? nothing : path\n\n#### potential growth\nsim.plot_potential_growth_lai_height(; θ, path = f(\"$docs_img/potential_growth_lai_height.png\"))\nsim.plot_potential_growth_height_lai(; θ, path = f(\"$docs_img/potential_growth_height_lai.png\"))\nsim.plot_potential_growth_height(; θ, path = f(\"$docs_img/potential_growth_height.png\"))\nsim.plot_lai_traits(; θ, path = f(\"$docs_img/lai_traits.png\"))\nsim.plot_community_height_influence(; θ, path = f(\"$docs_img/community_height_influence.png\"))\n\n#### transfer functions\nsim.plot_W_srsa(; θ, path = f(\"$docs_img/W_rsa_default.png\"))\nsim.plot_N_srsa(; θ, path = f(\"$docs_img/N_rsa_default.png\"))\nsim.plot_N_srsa(; θ, path = f(\"$docs_img/N_rsa_0_5.png\"), δ_nrsa = 0.5)\nsim.plot_N_amc(; θ, path = f(\"$docs_img/N_amc_default.png\"))\nsim.plot_N_amc(; θ, path = f(\"$docs_img/N_amc_0_5.png\"), δ_amc = 0.5)\nsim.plot_root_investment(; θ, path = f(\"$docs_img/root_investment.png\"))\n\n#### reducer functions\nsim.plot_temperature_reducer(; θ, path = f(\"$docs_img/temperature_reducer.png\"))\nsim.plot_radiation_reducer(; θ, path = f(\"$docs_img/radiation_reducer.png\"))\nsim.plot_height_influence(; θ, path = f(\"$docs_img/height_influence.png\"))\nsim.plot_below_influence(; θ, path = f(\"$docs_img/below_influence.png\"))\n\n#### seasonal effects\nsim.plot_seasonal_effect(; θ, path = f(\"$docs_img/seasonal_reducer.png\"))\nsim.plot_seasonal_component_senescence(; θ, path = f(\"$docs_img/seasonal_factor_senescence.png\"))\n\n#### land use\nsim.plot_mowing(; θ, path = f(\"$docs_img/mowing.png\"))\nsim.plot_grazing(; β_PAL_lnc = 1.0, θ, path = f(\"$docs_img/grazing_default.png\"))\nsim.plot_grazing(; β_PAL_lnc = 2.0, θ, path = f(\"$docs_img/grazing_2.png\"))\nsim.plot_η_GRZ(; θ, path = f(\"$docs_img/η_GRZ.png\"))\n\n##  clonal growth\nsim.plot_clonalgrowth(; θ, path = f(\"$docs_img/clonalgrowth.png\"))\nsim.animate_clonalgrowth(; θ, path = f(\"$docs_img/clonalgrowth_animation.mp4\"))","category":"page"},{"location":"model_io/#Model-inputs-and-outputs","page":"Model input and output","title":"Model inputs and outputs","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"CurrentModule = GrasslandTraitSim","category":"page"},{"location":"model_io/#Inputs","page":"Model input and output","title":"Inputs","text":"","category":"section"},{"location":"model_io/#climate_input","page":"Model input and output","title":"Daily abiotic conditions","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"Variable Symbol Description used in\ntemperature T_txy Temperature [°C] temperature_reduction!\ntemperature_sum ST_txy Yearly cumulative temperature [°C] seasonal_reduction!, seasonal_component_senescence\nprecipitation P_txy Precipitation [mm d⁻¹] change_water_reserve\nPAR PAR_txy Photosynthetically active radiation [MJ ha⁻¹ d⁻¹] potential_growth!, radiation_reduction!\nPET PET_txy Potential evapotranspiration [mm d⁻¹] water_reduction!, evaporation, transpiration","category":"page"},{"location":"model_io/#management_input","page":"Model input and output","title":"Daily management variables","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"Variable Symbol Description used in\nCUT_mowing CUT_txy Height of mowing event, NaN means no mowing [m] mowing!\nLD_grazing LD_txy Grazing intensity measured in livestock units, NaN means no grazing [LD ha⁻¹] grazing!","category":"page"},{"location":"model_io/#Traits-of-the-plant-species","page":"Model input and output","title":"Traits of the plant species","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"Variable Symbol Description used in\namc AMC_s Arbuscular mycorrhizal colonisation rate [-] below_ground_competition!, nutrient_reduction!\nsla SLA_s Specific leaf area [m² g⁻¹] water_reduction!, calculate_LAI!, senescence!\nheight H_s Plant height [m] potential_growth!, light_competition!, mowing!\nrsa RSA_s Root surface area / aboveground biomass [m² g⁻¹] below_ground_competition!, water_reduction!, nutrient_reduction!\nabp ABP_s Aboveground biomass / total biomass [-] calculate_LAI!\nlbp LBP_s Leaf mass / total biomass [-] calculate_LAI!\nlnc LNC_s Leaf nitrogen content per leaf mass [mg g⁻¹] grazing!","category":"page"},{"location":"model_io/#site_input","page":"Model input and output","title":"Raw time invariant site variables","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"Variable Symbol Description used in\nsand SND_xy Sand content [-] input_WHC_PWP!\nsilt SLT_xy Silt content [-] input_WHC_PWP!\nclay CLY_xy Clay content [-] input_WHC_PWP!\norganic OM_xy Organic matter content [-] input_WHC_PWP!\nbulk BLK_xy Bulk density [g cm⁻³] input_WHC_PWP!\nrootdepth RD_xy Mean rooting depth of plants [mm] input_WHC_PWP!\ntotalN N_xy Total nitrogen [g kg⁻¹] input_nutrients!","category":"page"},{"location":"model_io/#Derived-time-invariant-site-variables","page":"Model input and output","title":"Derived time invariant site variables","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"Variable Symbol Description used in\nPWP[x, y] PWP_xy Permanent wilting point [mm] water_reduction!\nWHC[x, y] WHC_xy Water holding capacity [mm] water_reduction!\nnutindex[x, y] N_xy  N_max Nutrients index ranging from zero to one [-] nutrient_reduction!","category":"page"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"","category":"page"},{"location":"model_io/#Outputs","page":"Model input and output","title":"Outputs","text":"","category":"section"},{"location":"model_io/#Sstate-variables","page":"Model input and output","title":"Sstate variables","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"Variable Symbol Description\nbiomass[t, x, y, species] B_txys Aboveground fresh green biomass [kg ha⁻¹]\nwater[t, x, y] W_txy Water reserve [mm]","category":"page"},{"location":"model_io/#Derived-outputs","page":"Model input and output","title":"Derived outputs","text":"","category":"section"},{"location":"model_io/","page":"Model input and output","title":"Model input and output","text":"Variable Description\nleaf[t, x, y, species], stem[t, x, y, species], root[t, x, y, species] Allocation of biomass to leaves, stems and roots\nCWM_trait[t, x, y] Community weighted mean of all traits\nCWV_trait[t, x, y] Community weighted variance of all traits\nFDI[t, x, y], TDI[t, x, y] Functional and taxonomic diversity indices","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/initialization/#Initialization","page":"Initialization","title":"Initialization","text":"","category":"section"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"initialization","category":"page"},{"location":"Modelling_API/initialization/#GrasslandTraitSim.initialization","page":"Initialization","title":"GrasslandTraitSim.initialization","text":"initialization(\n;\n    input_obj,\n    p,\n    prealloc,\n    prealloc_specific,\n    trait_input,\n    callback\n)\n\n\nInitialize the simulation object.\n\nThe function is called once at the beginning of the simulation within solve_prob.\n\nThe traits of the species are generated or set if provided, the parameters are initialized and the initial conditions of the state variables are set.\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/initialization/#Initialization-of-traits","page":"Initialization","title":"Initialization of traits","text":"","category":"section"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"random_traits!\nsimilarity_matrix!","category":"page"},{"location":"Modelling_API/initialization/#GrasslandTraitSim.random_traits!","page":"Initialization","title":"GrasslandTraitSim.random_traits!","text":"random_traits!(; container)\n\n\nGenerate random traits for the simulation.\n\nThe traits are generated using a bivariate Gaussian mixture model with full covariance matrices. For each species either the first or the second Gaussian distribution is used to generate the log/logit-transformed traits. The traits are then backtransformed to the original scale and the units are added. If the proportion of the leaf mass of the total plant mass (lbp) is larger than 0.95 % of the proportion of the aboveground mass of the total mass (abp), lbp is set to 0.95 % of abp.\n\nThe Gaussian mixture model was fitted to the data with the function BayesianGaussianMixture of [6].\n\nOverview of the traits:\n\ntrait unit description transformation\nsla m² g⁻¹ specific   leaf area log\nheight m plant height log\nlnc mg g⁻¹ leaf nitrogen content per leaf dry mass log\nsrsa m² g⁻¹ root surface area per aboveground biomass log\namc - arbuscular mycorrhizal colonisation rate logit\nabp - aboveground dry mass per plant dry mass logit\nlbp - leaf dry mass per plant dry mass logit\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/initialization/#GrasslandTraitSim.similarity_matrix!","page":"Initialization","title":"GrasslandTraitSim.similarity_matrix!","text":"similarity_matrix!(; container)\n\n\nCalculates the similarity between plants concerning their investment in fine roots and collaboration with mycorrhiza.\n\nThe trait similarity is build with the traits root surface area per belowground biomass (srsa) and the arbuscular mycorrhizal colonisation rate (amc).\n\nStandardized residuals are calculated for both traits:\n\ntextamc_resid =\n\nThe trait similarity between plant species i and plant species u for T traits is calculated as follows:\n\ntexttrait_similarity_iu =\n    1-fracsum_t=1^t=T\n        textscaled_trait_ti - textscaled_trait_tuT\n\nTo give each functional trait an equal influence, the trait values have been scaled by the 5 % (Q_005 t) and 95 % quantile (Q_095 t) of trait values of 100 plant species:\n\ntextscaled_trait_ti =\n    fractexttrait_ti - Q_005 t\n    Q_095 t - Q_005 t\n\nIf the rescaled trait values were below zero or above one, the values were set to zero or one respectively.\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/initialization/#Initialization-of-parameters","page":"Initialization","title":"Initialization of parameters","text":"","category":"section"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"Many parameters are given at the start the simulation. However, some parameters are dependent on input parameters and of the generated traits  and are initialized at the start of the simulation.","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"The species-specific parameters are:","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"μ: senescence rate [d⁻¹]","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"senescence_rate!","category":"page"},{"location":"Modelling_API/initialization/#GrasslandTraitSim.senescence_rate!","page":"Initialization","title":"GrasslandTraitSim.senescence_rate!","text":"senescence_rate!(; container)\n\n\nIntialize the basic senescence rate based on the specific leaf area\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"Initializing parameters for the functional response","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"The species-specific parameters are:","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"Initialization of patch-specific parameters","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"The patch specific parameters are: ","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"water holding capacity WHC [mm]\npermanent wilting point PWP [mm]\nnutrients [-]","category":"page"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"input_WHC_PWP!\ninput_nutrients!","category":"page"},{"location":"Modelling_API/initialization/#GrasslandTraitSim.input_WHC_PWP!","page":"Initialization","title":"GrasslandTraitSim.input_WHC_PWP!","text":"input_WHC_PWP!(; container)\n\n\nDerive walter holding capacity (WHC) and permanent wilting point (PWP) from soil properties.\n\nbeginalign\n    θ₁ = a₁  textsand + b₁  textsilt + c₁  textclay +\n            d₁  textorganic + e₁  textbulk \n    textWHC = θ₁  textrootdepth \n    θ₂ = a₂  textsand + b₂  textsilt + c₂  textclay +\n            d₂  textorganic + e₂  textbulk \n    textPWP = θ₂  textrootdepth\nendalign\n\nEquation and coefficients are taken from [1]. The coefficients a, b, c, d and e differ for the water holding capacity (matrix potential Ψ = -0.07 bar) and the permanent wilting point (matrix potential Ψ = -15 bar). The empirical coefficients that were estimated by [1] can be seen in the folling table:\n\nΨ [bar] a b c d e\n-0.07 0.005678 0.009228 0.009135 0.006103 -0.2696\n-15 -5.9e-5 0.001142 0.005766 0.002228 0.02671\n\nsand: sand content [%]\nsilt: silt content [%]\nclay: clay content [%]\nbulk: bulk density [g cm⁻³]\norganic: organic matter content [%]\nrootdepth: rooting depth [mm]\nθ: water content [cm³ cm⁻³]\nWHC: water holding capacity [mm]\nPWP: permanent wilting point [mm]\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/initialization/#GrasslandTraitSim.input_nutrients!","page":"Initialization","title":"GrasslandTraitSim.input_nutrients!","text":"input_nutrients!(; container)\n\n\nDerive a nutrient index from total soil nitrogen.\n\ntextnutrients = fractexttotalNN_max\n\ntotalN: total nitrogen [g kg⁻¹]\nN_max: maximum total nitrogen [g kg⁻¹]\nnutrients: nutrient index [-]\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/initialization/#Set-the-initial-conditions-of-the-state-variables","page":"Initialization","title":"Set the initial conditions of the state variables","text":"","category":"section"},{"location":"Modelling_API/initialization/","page":"Initialization","title":"Initialization","text":"set_initialconditions!","category":"page"},{"location":"Modelling_API/initialization/#GrasslandTraitSim.set_initialconditions!","page":"Initialization","title":"GrasslandTraitSim.set_initialconditions!","text":"set_initialconditions!(; container)\n\n\nSet the initial conditions for the state variables.\n\nEach plant species (u_biomass) gets an equal share of the initial biomass (initbiomass). The soil water content (u_water) is set to 180 mm. The height is set to half of the maximum height of the species. The above- and belowground biomass (u_above_biomass, u_below_biomass) are calculated based on the aboveground biomass proportion (abp).\n\nu_biomass: state variable biomass [kg ha⁻¹]\nu_water: state variable soil water content [mm]\nu_height: state variable height [m]\nu_above_biomass: state variable aboveground biomass [kg ha⁻¹]\nu_below_biomass: state variable belowground biomass [kg ha⁻¹]\ninitbiomass: initial biomass [kg ha⁻¹]\ninitsoilwater: initial soil water content [mm]\nheight: potential height of the species [m]\nabp: aboveground biomass proportion [-]\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/clonalgrowth/","page":"Clonal growth","title":"Clonal growth","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/clonalgrowth/#Clonal-growth","page":"Clonal growth","title":"Clonal growth","text":"","category":"section"},{"location":"Modelling_API/clonalgrowth/","page":"Clonal growth","title":"Clonal growth","text":"clonalgrowth!","category":"page"},{"location":"Modelling_API/clonalgrowth/#GrasslandTraitSim.clonalgrowth!","page":"Clonal growth","title":"GrasslandTraitSim.clonalgrowth!","text":"clonalgrowth!(; container)\n\n\nYearly clonal growth.\n\nThe biomass is transferred from the home patch to the neighbour (target) patches. This is done for all patches once per year.\n\n(Image: ) (Image: )\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_env_factors/","page":"Growth: community adjustment","title":"Growth: community adjustment","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/growth_env_factors/#Community-growth-adjustment-by-environmental-and-seasonal-factors","page":"Growth: community adjustment","title":"Community growth adjustment by environmental and seasonal factors","text":"","category":"section"},{"location":"Modelling_API/growth_env_factors/","page":"Growth: community adjustment","title":"Growth: community adjustment","text":"The listed functions limit the growth potential of all  plant species without any species-specific reduction:","category":"page"},{"location":"Modelling_API/growth_env_factors/","page":"Growth: community adjustment","title":"Growth: community adjustment","text":"☀ the photosynthetically active radiation radiation_reduction!\n🌡 the air temperature temperature_reduction!\n📈 a seasonal effect, that is modelled by the accumulated degree days seasonal_reduction!","category":"page"},{"location":"Modelling_API/growth_env_factors/#Radiation-influence","page":"Growth: community adjustment","title":"Radiation influence","text":"","category":"section"},{"location":"Modelling_API/growth_env_factors/","page":"Growth: community adjustment","title":"Growth: community adjustment","text":"radiation_reduction!","category":"page"},{"location":"Modelling_API/growth_env_factors/#GrasslandTraitSim.radiation_reduction!","page":"Growth: community adjustment","title":"GrasslandTraitSim.radiation_reduction!","text":"radiation_reduction!(; container, PAR)\n\n\nReduction of radiation use efficiency at high radiation levels.\n\nRAD_txy = minleft(1 1-gamma_1left(PAR_txy - gamma_2right)right)\n\nThe equations and the parameter values are taken from [7].\n\nParameter, see also SimulationParameter:\n\ngamma_1 (γ₁) controls the steepness of the linear decrease in radiation use efficiency for high PAR_txy values [MJ⁻¹ ha]\ngamma_2 (γ₂) threshold value of PAR_txy from which starts a linear decrease in radiation use efficiency [MJ ha⁻¹]\n\nVariables:\n\nPAR_txy (PAR) photosynthetic active radiation [MJ ha⁻¹]\n\nOutput:\n\nRAD_txy (RAD) growth reduction factor based on too high radiation [-]\n\n(Image: Image of the radiation reducer function)\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_env_factors/#Temperature-influence","page":"Growth: community adjustment","title":"Temperature influence","text":"","category":"section"},{"location":"Modelling_API/growth_env_factors/","page":"Growth: community adjustment","title":"Growth: community adjustment","text":"temperature_reduction!","category":"page"},{"location":"Modelling_API/growth_env_factors/#GrasslandTraitSim.temperature_reduction!","page":"Growth: community adjustment","title":"GrasslandTraitSim.temperature_reduction!","text":"temperature_reduction!(; container, T)\n\n\nReduction of the growth if the temperature is low or too high.\n\nTEMP_txy =\n    begincases\n    0  textif  T_txy  T_0 \n    fracT_txy - T_0T_1 - T_0  textif  T_0  T_txy  T_1 \n    1  textif  T_1  T_txy  T_2 \n    fracT_3 - T_txyT_3 - T_2  textif  T_2  T_txy  T_3 \n    0  textif  T_txy  T_3 \n    endcases\n\nEquation are from [8] and theses are based on [7].\n\nParameter, see also SimulationParameter:\n\nT_0 (T₀) minimum temperature for growth [°C]\nT_1 (T₁) lower limit of optimum temperature for growth [°C]\nT_2 (T₂) upper limit of optimum temperature for growth [°C]\nT_3 (T₃) maximum temperature for growth [°C]\n\nVariables:\n\nT_txy (temperature) mean air temperature [°C]\n\nOutput:\n\nTEMP_txy (TEMP) temperature growth factor [-]\n\n(Image: Image of the temperature reducer function)\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_env_factors/#Seasonal-effect","page":"Growth: community adjustment","title":"Seasonal effect","text":"","category":"section"},{"location":"Modelling_API/growth_env_factors/","page":"Growth: community adjustment","title":"Growth: community adjustment","text":"seasonal_reduction!","category":"page"},{"location":"Modelling_API/growth_env_factors/#GrasslandTraitSim.seasonal_reduction!","page":"Growth: community adjustment","title":"GrasslandTraitSim.seasonal_reduction!","text":"seasonal_reduction!(; container, ST)\n\n\nReduction of growth due to seasonal effects. The function is based on the yearly cumulative sum of the daily mean temperatures.\n\nbeginalign*\n    SEA_txy =\n        begincases\n        SEA_textmin  textif ST_txy  200mathrmK  \n        SEA_textmin + (SEA_textmax - SEA_textmin) cdot fracST_txy - 200mathrmKST_1 - 400mathrmK \n            textif 200mathrmK  ST_txy  ST_1 - 200mathrmK \n        SEA_textmax  textif ST_1 - 200mathrmK  ST_txy  ST_1 - 100mathrmK \n        SEA_textmin + (SEA_textmin - SEA_textmax) cdot fracST_txy - ST_2ST_2 - ST_1 - 100mathrmK \n            textif ST_1 - 100mathrmK  ST_txy  ST_2 \n        SEA_textmin  textif ST_txy  ST_2\n        endcases \n    ST_txy = sum_i=tbmod365^t maxleft(0mathrmK T_ixy - 0mathrmCright)\nendalign*\n\nThis empirical function was developed by [8]. A seasonal factor greater than one means that growth is increased by the use of already stored resources. A seasonal factor below one means that growth is reduced as the plant stores resources [8].\n\nParameter, see also SimulationParameter:\n\nST_1 (ST₁) is a threshold of the yearly accumulated temperature, above which the seasonality factor decreases from SEA_textmax to SEA_textmin [K]\nST_2 (ST₂) is a threshold of the yearly accumulated temperature, above which the seasonality factor is set to SEA_textmin [K]\nSEA_textmin (SEA_min) is the minimum value of the seasonal effect [-]\nSEA_textmax (SEA_max) is the maximum value of the seasonal effect [-]\n\nVariables:\n\nST_txy (ST) yearly cumulative mean air temperature [K]\nT_txy (temperature) mean air temperature [°C]\n\nOutput:\n\nSEA_txy (SEA) seasonal growth factor [-]\n\n(Image: Image of the seasonal effect function)\n\n\n\n\n\n","category":"function"},{"location":"References/","page":"References & Acknowledgements","title":"References & Acknowledgements","text":"Acknowledgement\nWe thank the managers of the three Exploratories, Max Müller, Julia Bass, Robert Künast, Miriam Teuscher, Anna K. Franke, Franca Marian and all former managers for their work in maintaining the plot and project infrastructure; Victoria Grießmeier for giving support through the central office, Andreas Ostrowski for managing the central data base, and Markus Fischer, Eduard Linsenmair, Dominik Hessenmöller, Daniel Prati, Ingo Schöning, François Buscot, Ernst-Detlef Schulze, Wolfgang W. Weisser and the late Elisabeth Kalko for their role in setting up the Biodiversity Exploratories project. We thank the administration of the Hainich national park, the UNESCO Biosphere Reserve Swabian Alb and the UNESCO Biosphere Reserve Schorfheide-Chorin as well as all land owners for the excellent collaboration. The work has been (partly) funded by the DFG Priority Program 1374 \"Biodiversity-Exploratories\". Field work permits were issued by the responsible state environmental offices of Baden-Württemberg, Thüringen, and Brandenburg.","category":"page"},{"location":"References/","page":"References & Acknowledgements","title":"References & Acknowledgements","text":"References","category":"page"},{"location":"References/","page":"References & Acknowledgements","title":"References & Acknowledgements","text":"S. C. Gupta and W. E. Larson. Estimating soil water retention characteristics from particle size distribution, organic matter percent, and bulk density. Water Resources Research 15, 1633–1635 (1979).\n\n\n\nI. Schöning, E. Solly, T. Klötzing, S. Trumbore and M. Schrumpf. MinSoil 2011 - Soil Carbon and Nitrogen Concentrations (2021). Dataset ID: 14446.\n\n\n\nI. Schöning, S. Trumbore, M. Schrumpf, T. Klötzing and H. Y. Gan. MinSoil 2014 - Soil Carbon and Nitrogen Concentrations (2021). Dataset ID: 18787.\n\n\n\nI. Schöning, T. Klötzing, A. Apostolakis, S. Trumbore and M. Schrumpf. MinSoil 2017 - Soil Carbon and Nitrogen Concentrations (2021). Dataset ID: 23846.\n\n\n\nI. Schöning and A. Apostolakis. Soil sampling campaign 2021, all experimental plots (EP), 0-10 cm  - carbon and nitrogen concentrations (2023). Dataset ID: 31210.\n\n\n\nF. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot and E. Duchesnay. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12, 2825–2830 (2011).\n\n\n\nA. Schapendonk, W. Stol, D. Kraalingen and B. Bouman. LINGRA,  a sink/source model to simulate grassland productivity in Europe. European Journal of Agronomy 9, 87–100 (1998).\n\n\n\nM. Jouven, P. Carrere and R. Baumont. Model predicting dynamics of biomass,  structure and digestibility of herbage in managed permanent pastures. 1. Model description. Grass and Forage Science 61, 112–124 (2006).\n\n\n\nF. Gillet. Modelling vegetation dynamics in heterogeneous pasture-woodland landscapes. Ecological Modelling 217, 1–18 (2008).\n\n\n\nT. Moulin, A. Perasso, P. Calanca and F. Gillet. DynaGraM: A process-based model to simulate multi-species plant community dynamics in managed grasslands. Ecological Modelling 439, 109345 (2021).\n\n\n\n","category":"page"},{"location":"tutorials/how_to_analyse_output/#How-to-analyse-the-model-output","page":"Analyse model output","title":"How to analyse the model output","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"I assume that you have read the tutorial on how to prepare the input data and run a simulation (see here). In this tutorial, we will analyse the output of the simulation that is stored in the object sol.","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"import GrasslandTraitSim as sim\n\nusing Statistics\nusing CairoMakie\nusing Unitful\nusing RCall # only for functional diversity indices\n\ntrait_input = sim.input_traits()\ninput_obj = sim.validation_input(; plotID = \"HEG01\", nspecies = length(trait_input.amc));\np = sim.optim_parameter()\nsol = sim.solve_prob(; input_obj, p, trait_input);\n\nnothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/#Biomass","page":"Analyse model output","title":"Biomass","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"We can look at the simulated biomass:","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"sol.output.biomass","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"The four dimension of the array are: daily time step, patch x dim, patch y dim, and species.  For plotting the values with Makie.jl, we have to remove the units with ustrip:","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"# if we have more than one patch per site, we have to first calculate the mean biomass per site\nspecies_biomass = dropdims(mean(sol.output.biomass; dims = (:x, :y)); dims = (:x, :y))\ntotal_biomass = vec(sum(species_biomass; dims = :species))\n\nfig, _ = lines(sol.simp.output_date_num, ustrip.(total_biomass), color = :darkgreen, linewidth = 2;\n      axis = (; ylabel = \"Total dry biomass [kg ha⁻¹]\", \n                xlabel = \"Date [year]\"))\nfig\nsave(\"biomass.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"(Image: )","category":"page"},{"location":"tutorials/how_to_analyse_output/#Share-of-each-species","page":"Analyse model output","title":"Share of each species","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"We can look at the share of each species over time:","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"<details><summary>show code</summary>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"# colors are assigned according to the specific leaf area (SLA)\ncolor = ustrip.(sol.traits.sla)\ncolormap = :viridis\ncolorrange = (minimum(color), maximum(color))\nis = sortperm(color)\ncmap = cgrad(colormap)\ncolors = [cmap[(co .- colorrange[1]) ./ (colorrange[2] - colorrange[1])]\n          for co in color[is]]\n\n# calculate biomass proportion of each species\nbiomass_site = dropdims(mean(sol.output.biomass; dims=(:x, :y)); dims = (:x, :y))\nbiomass_ordered = biomass_site[:, sortperm(color)]\nbiomass_fraction = biomass_ordered ./ sum(biomass_ordered; dims = :species)\nbiomass_cumfraction = cumsum(biomass_fraction; dims = 2)\n\nbegin\n    fig = Figure()\n    Axis(fig[1,1]; ylabel = \"Relative proportion of biomass of the species\", \n         xlabel = \"Date [year]\",\n         limits = (sol.simp.output_date_num[1], sol.simp.output_date_num[end], 0, 1))\n\n    for i in 1:sol.simp.nspecies\n        ylower = nothing\n        if i == 1\n            ylower = zeros(size(biomass_cumfraction, 1))\n        else\n            ylower = biomass_cumfraction[:, i-1]\n        end\n        yupper = biomass_cumfraction[:, i]\n\n        band!(sol.simp.output_date_num, vec(ylower), vec(yupper);\n              color = colors[i])\n    end\n\n    Colorbar(fig[1,2]; limits = colorrange, colormap = cmap, \n             label = \"Specific leaf area [m² g⁻¹]\")\n\n    fig\nend\nsave(\"share_biomass.png\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"</details>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"(Image: )","category":"page"},{"location":"tutorials/how_to_analyse_output/#Soil-water-content","page":"Analyse model output","title":"Soil water content","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"Similarly, we plot the soil water content over time:","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"# if we have more than one patch per site, \n# we have to first calculate the mean soil water content per site\nsoil_water_per_site = dropdims(mean(sol.output.water; dims = (:x, :y)); dims = (:x, :y))\n\nfig, _ = lines(sol.simp.output_date_num, ustrip.(soil_water_per_site), color = :blue, linewidth = 2;\n      axis = (; ylabel = \"Soil water content [mm]\", xlabel = \"Date [year]\"))\nfig\nsave(\"soil_water_content.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"(Image: )","category":"page"},{"location":"tutorials/how_to_analyse_output/#Community-weighted-mean-traits","page":"Analyse model output","title":"Community weighted mean traits","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"We can calculate for all traits the community weighted mean over time:","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"<details><summary>show code</summary>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"relative_biomass = species_biomass ./ total_biomass\ntraits = [:height, :sla, :lnc, :srsa, :amc, :abp, :lbp]\ntrait_names = [\n    \"Potential\\n height [m]\", \"Specific leaf\\narea [m² g⁻¹]\", \"Leaf nitrogen \\nper leaf mass\\n [mg g⁻¹]\",\n    \"Root surface\\narea per above\\nground biomass\\n[m² g⁻¹]\", \"Arbuscular\\n mycorrhizal\\n colonisation\",\n    \"Aboveground\\nbiomass per total\\nbiomass [-]\", \"Leaf biomass\\nper total \\nbiomass [-]\"]\n\nbegin\n    fig = Figure(; size = (500, 1000))\n\n    for i in eachindex(traits)\n        trait_vals = sol.traits[traits[i]]\n        weighted_trait = trait_vals .* relative_biomass'\n        cwm_trait = vec(sum(weighted_trait; dims = 1))\n\n        Axis(fig[i, 1];\n                xlabel = i == length(traits) ? \"Date [year]\" : \"\",\n                xticklabelsvisible = i == length(traits) ? true : false,\n                ylabel = trait_names[i])\n        lines!(sol.simp.output_date_num, ustrip.(cwm_trait);\n                color = :black, linewidth = 2)\n        \n    end\n    \n    [rowgap!(fig.layout, i, 5) for i in 1:length(traits)-1]\n    \n    fig\nend\nsave(\"traits_time.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"</details>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"(Image: )","category":"page"},{"location":"tutorials/how_to_analyse_output/#Grazed-and-mown-biomass","page":"Analyse model output","title":"Grazed and mown biomass","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"We can look at the grazed and mown biomass over time:","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"<details><summary>show code</summary>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"# total \nsum(sol.output.mown)\nsum(sol.output.grazed)\n\n# plot the grazed and mown biomass over time\ngrazed_site = dropdims(mean(sol.output.grazed; dims=(:x, :y, :species)); dims=(:x, :y, :species))\ncum_grazed = cumsum(grazed_site)\n\nmown_site = dropdims(mean(sol.output.mown; dims=(:x, :y, :species)); dims=(:x, :y, :species))\ncum_mown = cumsum(mown_site)\nbegin\n      fig = Figure()\n      Axis(fig[1,1]; ylabel = \"Cummulative grazed\\nbiomass [kg ha⁻¹]\")\n      lines!(sol.simp.mean_input_date_num, ustrip.(vec(cum_grazed)), color = :black, linewidth = 2;)\n      Axis(fig[2,1]; ylabel = \"Cummulative mown\\nbiomass [kg ha⁻¹]\", xlabel = \"Date [year]\")\n      lines!(sol.simp.mean_input_date_num, ustrip.(vec(cum_mown)), color = :black, linewidth = 2;)\n      fig\nend\nsave(\"grazed_mown.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"</details>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"(Image: )","category":"page"},{"location":"tutorials/how_to_analyse_output/#Functional-diversity-indices","page":"Analyse model output","title":"Functional diversity indices","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"<details><summary>show code</summary>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"################ Calculate functional diversity in R\nfunction traits_to_matrix(trait_data; std_traits = true)\n    trait_names = keys(trait_data)\n    ntraits = length(trait_names)\n    nspecies = length(trait_data[trait_names[1]])\n    m = Matrix{Float64}(undef, nspecies, ntraits)\n\n    for i in eachindex(trait_names)\n        tdat = trait_data[trait_names[i]]\n        if std_traits\n            m[:, i] = (tdat .- mean(tdat)) ./ std(tdat)\n        else\n            m[:, i] = ustrip.(tdat)\n        end\n    end\n\n    return m\nend\n\ntrait_input_wo_lbp = Base.structdiff(trait_input, (; lbp = nothing))\n\ntstep = 100\nbiomass = sol.output.biomass[1:tstep:end, 1, 1, :]\nbiomass_R = ustrip.(biomass.data)\ntraits_R = traits_to_matrix(trait_input_wo_lbp;)\nsite_names = string.(\"time_\", 1:size(biomass_R, 1))\nspecies_names = string.(\"species_\", 1:size(biomass_R, 2))\n\n## transfer data to R\n@rput species_names site_names traits_R biomass_R\n\nR\"\"\"\nlibrary(fundiversity)\n\nrownames(traits_R) <- species_names\nrownames(biomass_R) <- site_names\ncolnames(biomass_R) <- species_names\n\nfric_std_R <- fd_fric(traits_R, biomass_R, stand = TRUE)$FRic\nfdis_R <- fd_fdis(traits_R, biomass_R)$FDis\nfdiv_R <- fd_fdiv(traits_R, biomass_R)$FDiv\nfeve_R <- fd_feve(traits_R, biomass_R)$FEve\n\"\"\"\n\n## get results back from R\n@rget fric_std_R fdis_R fdiv_R feve_R\n\nbegin\n    fig = Figure(size = (900, 1200))\n\n    Axis(fig[1, 1]; ylabel = \"Number of species\", xticks = 2006:2:2022,\n         xticklabelsvisible = false, limits = (nothing, nothing, 0, nothing))\n    nspecies = sum(sol.output.biomass[1:tstep:end, 1, 1, :] .> 0.0u\"kg / ha\"; dims = :species)\n    lines!(sol.simp.output_date_num[1:tstep:end], vec(nspecies);)\n\n    Axis(fig[2, 1]; yscale = identity, xticks = 2006:2:2022, xticklabelsvisible = false,\n         ylabel = \"Functional richness -\\nfraction of possible volume\\nto actual trait volume\")\n    lines!(sol.simp.output_date_num[1:tstep:end], fric_std_R)\n\n    Axis(fig[3, 1]; xticks = 2006:2:2022, xticklabelsvisible = false,\n         ylabel = \"Functional dispersion -\\nweighted distance to\\ncommunity weighted mean\")\n    lines!(sol.simp.output_date_num[1:tstep:end], fdis_R)\n\n    Axis(fig[4, 1]; xticks = 2006:2:2022, xticklabelsvisible = false,\n        ylabel = \"Functional divergence -\\nweighted distance to\\ncenter of convex hull\")\n    lines!(sol.simp.output_date_num[1:tstep:end], fdiv_R)\n\n    Axis(fig[5, 1]; xticks = 2006:2:2022, xticklabelsvisible = true,\n        ylabel = \"Functional evenness -\\n regularity of species on\\nminimum spanning tree,\\nweighted by abundance\")\n    lines!(sol.simp.output_date_num[1:tstep:end], feve_R)\n\n    fig\nend\nsave(\"fun_diversity.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"</details>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"(Image: )","category":"page"},{"location":"tutorials/how_to_analyse_output/#Shannon-and-Simpson-diversity","page":"Analyse model output","title":"Shannon and Simpson diversity","text":"","category":"section"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"We can calculate the Shannon and Simpson diversity over time:","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"<details><summary>show code</summary>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"biomass_site = dropdims(mean(sol.output.biomass; dims = (:x, :y)); dims = (:x, :y))\ntend = size(biomass_site, 1)\nshannon = Array{Float64}(undef, tend)\nsimpson = Array{Float64}(undef, tend)\nfor t in 1:tend\n    b1 = biomass_site[t, :]\n    b1 = b1[.!iszero.(b1)]\n    p1 = b1 ./ sum(b1)\n    shannon[t] = -sum(p1 .* log.(p1))\n    simpson[t] = 1 - sum(p1 .^ 2)\nend\n\nbegin\n    fig = Figure()\n    Axis(fig[1,1]; ylabel = \"Shannon index\")\n    lines!(sol.simp.output_date_num, shannon, color = :black, linewidth = 2;)\n    Axis(fig[2,1]; ylabel = \"Simpson index\", xlabel = \"Date [year]\")\n    lines!(sol.simp.output_date_num, simpson, color = :black, linewidth = 2;)\n    fig\nend\nsave(\"shannon_simpson.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"</details>","category":"page"},{"location":"tutorials/how_to_analyse_output/","page":"Analyse model output","title":"Analyse model output","text":"(Image: )","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"CurrentModule = GrasslandTraitSim","category":"page"},{"location":"tutorials/how_to_prepare_input/#How-to-prepare-the-input-data-to-start-a-simulation","page":"Prepare input and run simulation","title":"How to prepare the input data to start a simulation","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"Which input is needed (see also here):","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"daily climatic variables (PET, PAR, temperature, precipitation)\ndaily management variables (mowing, livestock density)\nsoil properties (texture, organic matter, bulk density, root depth)","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"We will create the input for a simulation from 2010 to 2012 with dummy data.","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"If you want to use the model with data from your own site, you can prepare the input similarly. Convert the data to the units that are used here and then, add the Unitful.jl unit to the data.","category":"page"},{"location":"tutorials/how_to_prepare_input/#Simulation-settings","page":"Prepare input and run simulation","title":"Simulation settings","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"import GrasslandTraitSim as sim\nimport Dates\nusing Unitful\n\ntime_step_days = Dates.Day(1)\noutput_date = Dates.Date(2010):Dates.lastdayofyear(Dates.Date(2012))\nmean_input_date = output_date[1:end-1] .+ (time_step_days ÷ 2)\nyear = Dates.year.(output_date[1:end-1])\nntimesteps = length(output_date) - 1\nts = Base.OneTo(ntimesteps) \n\nsimp = (\n    output_date,\n    ts,\n    ntimesteps, \n    time_step_days,\n    mean_input_date,\n    nspecies = 5,  \n    patch_xdim = 1, \n    patch_ydim = 1, \n    npatches = 1,\n    nutheterog = 0.0, \n    trait_seed = missing,  \n    \n    ## which processes to include, see extra tutorial\n    ## empty tuple means, that everything is included\n    included = sim.create_included(),\n    \n    ## include parameter for likelihood calculation?\n    ## again empty tuple means that everything is included\n    ## here we say that don't need the parameters for the likelihood\n    likelihood_included = (; biomass = false, trait = false)\n)\n\nnothing # hide","category":"page"},{"location":"tutorials/how_to_prepare_input/#Climatic-data","page":"Prepare input and run simulation","title":"Climatic data","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"All climatic variables are here set to one to avoid complex data wrangling.","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"For an explanation of the variables, see here.","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"# --------------- PAR [MJ ha⁻¹]\nPAR = ones(ntimesteps)u\"MJ / ha\"\n\n# --------------- PET [mm]\nPET = ones(ntimesteps)u\"mm\"\n\n# --------------- precipiation [mm]\t\nprecipitation = ones(ntimesteps)u\"mm\"\n\n# --------------- temperature [°C]\ntemperature = ones(ntimesteps)u\"°C\"\n\n# --------------- yearly temperature sum [°C]\ntemperature_sum = sim.cumulative_temperature(temperature, year) \n\n# --------------- final tuple of climatic inputs\nclimatic_inputs = (; temperature, temperature_sum, PAR, PAR_sum = PAR, PET, PET_sum = PET, precipitation)\n\nnothing # hide","category":"page"},{"location":"tutorials/how_to_prepare_input/#Management-data","page":"Prepare input and run simulation","title":"Management data","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"To show how to create the management data, we will add two mowing events  (first of May and first of August) and one grazing event per year (first of June to first of August).","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"If you want, you can vary the mowing height and the grazing intensity for each event. If the site was not mowed or grazed in a year, set the variable to NaN.","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"For an explanation of the variables, see here.","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"# --------------- mowing height [m], NaN if no mowing\nCUT_mowing = fill(NaN * u\"m\", ntimesteps)\nmowing_dates = [Dates.Date(2010, 5, 1), Dates.Date(2010, 8, 1), \n                Dates.Date(2011, 5, 1), Dates.Date(2011, 8, 1)]\n[CUT_mowing[d .== output_date[1:end-1]] .= 0.08u\"m\" for d in mowing_dates]\n\n# --------------- grazing intensity in livestock density [ha⁻¹], NaN if no grazing\nLD_grazing = fill(NaN / u\"ha\", ntimesteps)\ngrazing_starts = [Dates.Date(2010, 6, 1), Dates.Date(2011, 6, 1)]\ngrazing_ends = [Dates.Date(2010, 8, 1), Dates.Date(2011, 8, 1)]\nlivestock_density = [1, 3]u\"ha^-1\"\n\nfor i in eachindex(grazing_starts)\n    r = grazing_starts[i] .<= output_date[1:end-1] .<= grazing_ends[i]\n    LD_grazing[r] .= livestock_density[i]\nend\n\nmanagement_tuple = (; CUT_mowing, LD_grazing)\n\nnothing # hide","category":"page"},{"location":"tutorials/how_to_prepare_input/#Site-variables","page":"Prepare input and run simulation","title":"Site variables","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"For an explanation of the variables, see here.","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"site_tuple = (;\n    totalN = 5.0u\"g / kg\",\n    clay = 0.5,       \n    silt = 0.45,       \n    sand = 0.05,        \n    organic = 0.06,     \n    bulk = 0.7u\"g / cm^3\",\n    rootdepth = 160.0u\"mm\",\n    initbiomass = 1500u\"kg / ha\",\n    initsoilwater = 80u\"mm\"\n)    \n\nnothing # hide       ","category":"page"},{"location":"tutorials/how_to_prepare_input/#Putting-everything-together","page":"Prepare input and run simulation","title":"Putting everything together","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"Then we can add all the tuples to one bigger named tuple.","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"input_obj = (; input = (;\n                   climatic_inputs..., \n                   management_tuple...,),\n               site = site_tuple, \n               simp)","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"For the plots from the Biodiversity Exploratories, we used the following convenience function to create the same object:","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"input_obj_HEG01 = sim.validation_input(;\n    plotID = \"HEG01\", nspecies = 5);\n\nnothing # hide","category":"page"},{"location":"tutorials/how_to_prepare_input/#Traits","page":"Prepare input and run simulation","title":"Traits","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"If no input traits are specified, the model will generate for each simulation new traits from a Gaussian Mixture model that was fitted to grassland plant species in Germany (see random_traits!).","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"If you want to use your own traits, you can specify them in the following way:","category":"page"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"# the number of values per array has to be equal to the number of species\ntrait_input = (;\n    amc = [0.12, 0.52, 0.82, 0.13, 0.16],\n    sla = [0.021, 0.026, 0.014, 0.016, 0.0191]u\"m^2/g\",\n    height = [0.38, 0.08, 0.06, 0.51, 0.27]u\"m\",\n    srsa = [0.108, 0.163, 0.117, 0.132, 0.119]u\"m^2/g\",\n    abp = [0.63, 0.52, 0.65, 0.58, 0.72],\n    lbp = [0.55, 0.49, 0.62, 0.38, 0.68],\n    lnc = [19.6, 20.7, 22.7, 20.1, 23.6]u\"mg/g\")\n\nnothing # hide","category":"page"},{"location":"tutorials/how_to_prepare_input/#Run-a-simulation","page":"Prepare input and run simulation","title":"Run a simulation","text":"","category":"section"},{"location":"tutorials/how_to_prepare_input/","page":"Prepare input and run simulation","title":"Prepare input and run simulation","text":"## get parameters\np = sim.SimulationParameter()\n\n# if you will run many simulations, it is recommended to preallocated the vectors\n# but the simulation will also run without preallocation \nprealloc = sim.preallocate_vectors(; input_obj);\nprealloc_specific = sim.preallocate_specific_vectors(; input_obj);\n\n# traits will be generated, no preallocation\nsol = sim.solve_prob(; input_obj, p);\n\n# with static traits, with preallocation\nsol = sim.solve_prob(; input_obj, prealloc, prealloc_specific, p, trait_input);\n\nnothing # hide","category":"page"},{"location":"time_step/#Using-different-time-steps","page":"Time step","title":"Using different time steps","text":"","category":"section"},{"location":"time_step/#Input-rescaled-to-different-time-steps","page":"Time step","title":"Input rescaled to different time steps","text":"","category":"section"},{"location":"time_step/","page":"Time step","title":"Time step","text":"using CairoMakie\nusing Unitful\nusing Statistics\nimport GrasslandTraitSim as sim\n\nfunction plot_input_time_steps(input_obj1, input_obj2)\n     idate_1 = input_obj1.simp.mean_input_date_num\n     idate_long = input_obj2.simp.mean_input_date_num\n\n     fig = Figure(size = (500, 1400))\n\n     Axis(fig[1, 1]; ylabel = \"Temperature [°C]\",\n          xticklabelsvisible = false)\n     lines!(idate_1, ustrip.(input_obj1.input.temperature), color = :red, alpha = 0.3)\n     lines!(idate_long, ustrip.(input_obj2.input.temperature))\n\n     Axis(fig[2, 1]; ylabel = \"Temperature sum [K]\",\n          xticklabelsvisible = false)\n     lines!(idate_1, ustrip.(input_obj1.input.temperature_sum), color = :red, alpha = 0.3)\n     lines!(idate_long, ustrip.(input_obj2.input.temperature_sum))\n\n     Axis(fig[3, 1]; ylabel = \"Mean photosynthetically\\nactive radiation [MJ ha⁻¹]\",\n          xticklabelsvisible = false)\n     lines!(idate_1, ustrip.(input_obj1.input.PAR), color = :red, alpha = 0.3)\n     lines!(idate_long, ustrip.(input_obj2.input.PAR))\n     \n     Axis(fig[4, 1]; ylabel = \"Potential\\nevapotranspiration\\n[mm d⁻¹]\",\n          xticklabelsvisible = false)\n     lines!(idate_1, ustrip.(input_obj1.input.PET), color = :red, alpha = 0.3)\n     lines!(idate_long, ustrip.(input_obj2.input.PET))\n\n\n     Axis(fig[5, 1]; ylabel = \"Precipitation [mm d⁻¹]\", xticklabelsvisible = false)\n     lines!(idate_1, ustrip.(input_obj1.input.precipitation), color = :red, alpha = 0.3, \n               label = \"$(input_obj1.simp.time_step_days.value) day\")\n     lines!(idate_long, ustrip.(input_obj2.input.precipitation) ./ \n               input_obj2.simp.time_step_days.value, label = \"$(input_obj2.simp.time_step_days.value) days\")\n     axislegend(\"Time step\"; position = :lt, framevisible = false)\n\n     Axis(fig[6, 1]; limits = (nothing, nothing, 0, 1), ylabel = \"Mowing events\",\n          xticklabelsvisible = false)\n     vlines!(idate_1[.! isnan.(input_obj1.input.CUT_mowing)], color = :red, alpha = 0.5)\n     vlines!(idate_long[ .! isnan.(input_obj2.input.CUT_mowing)], linestyle = :dash)\n\n     new_f = .!isnan.(input_obj2.input.LD_grazing)\n     new_date = idate_long[new_f]\n     new_low = zeros(length(new_date))\n     new_up = ustrip.(input_obj2.input.LD_grazing[new_f])\n     old_f = .!isnan.(input_obj1.input.LD_grazing)\n     old_date = idate_1[old_f]\n     old_low = zeros(length(old_date))\n     old_up = ustrip.(input_obj1.input.LD_grazing[old_f])\n     Axis(fig[7, 1]; ylabel = \"Grazing [LD ha⁻¹ d⁻¹]\", xlabel = \"Time [year]\")\n     rangebars!(old_date, old_low, old_up; color = (:red, 0.1))\n     rangebars!(new_date, new_low, new_up ./ input_obj2.simp.time_step_days.value)\n\n     fig\nend\n\ntrait_input = sim.input_traits()\nnspecies = length(trait_input.amc)\ninput_obj_1 = sim.validation_input(; plotID = \"HEG01\", nspecies, time_step_days = 1);\ninput_obj_7 = sim.validation_input(; plotID = \"HEG01\", nspecies, time_step_days = 7);\nplot_input_time_steps(input_obj_1, input_obj_7)","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"## load data\npath = joinpath(dirname(pathof(sim)), \"../assets/data/input/inputs_14_days.jld2\")\ninput_objs_14 = sim.load_input(path; plotIDs = [\"HEG01\"]);\n\n## faster than preprocessing:\n# input_obj_14 = sim.validation_input(; plotID = \"HEG01\", nspecies = 43, time_step_days = 14);\n\nplot_input_time_steps(input_obj_1, input_objs_14.HEG01)","category":"page"},{"location":"time_step/#Test-processes-for-different-time-steps","page":"Time step","title":"Test processes for different time steps","text":"","category":"section"},{"location":"time_step/","page":"Time step","title":"Time step","text":"function calc_total_biomass(included; plotID = \"HEG01\")\n     trait_input = sim.input_traits();\n     nspecies = length(trait_input.amc)\n     p = sim.SimulationParameter()\n     input_obj_1 = sim.validation_input(; plotID, nspecies, time_step_days = 1, included);\n     \n     path = joinpath(dirname(pathof(sim)), \"../assets/data/input/inputs_14_days.jld2\")\n     input_obj_14 = sim.load_input(path; plotIDs = [plotID], included)[Symbol(plotID)];\n     \n     ## faster than preprocessing:\n     # input_obj_14 = sim.validation_input(; plotID, nspecies = 71, time_step_days = 14, included);\n\n     sol_1 = sim.solve_prob(; input_obj=input_obj_1, p, trait_input);\n     sol_14 = sim.solve_prob(; input_obj=input_obj_14, p, trait_input);\n\n     species_biomass_1 = dropdims(mean(sol_1.output.biomass; dims = (:x, :y)); dims = (:x, :y))\n     total_biomass_1 = vec(sum(species_biomass_1; dims = :species))\n     species_biomass_14 = dropdims(mean(sol_14.output.biomass; dims = (:x, :y)); dims = (:x, :y))\n     total_biomass_14 = vec(sum(species_biomass_14; dims = :species))\n     \n     return ustrip.(total_biomass_1), ustrip.(total_biomass_14), sol_1.simp.output_date_num, sol_14.simp.output_date_num\nend\n\n\n########### Only senescence\nincluded = (;\n            senescence = true,\n            senescence_season = true,\n            senescence_sla = true,\n            potential_growth = false,\n            clonalgrowth = false,\n            mowing = false,\n            grazing = false,\n            lowbiomass_avoidance = false,\n            belowground_competition = false,\n            community_self_shading = false,\n            height_competition = false,\n            pet_growth_reduction = false,\n            sla_transpiration = false,\n            water_growth_reduction = false,\n            nutrient_growth_reduction = false,\n            temperature_growth_reduction = false,\n            seasonal_growth_adjustment = false,\n            radiation_growth_reduction = false)\nb1, b14, t1, t14 = calc_total_biomass(included)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"Only senescence\")\nlines!(t1, b1; linestyle = :dash, label = \"1 day\")\nlines!(t14, b14; label = \"14 days\", color = :red, alpha = 0.5)\naxislegend(\"Time step\"; position = :rt, framevisible = false)\nfig","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"########### Only potential growth\nincluded = (;\n            senescence = false,\n            senescence_season = false,\n            potential_growth = true,\n            clonalgrowth = false,\n            mowing = false,\n            grazing = false,\n            lowbiomass_avoidance = false,\n            belowground_competition = false,\n            community_self_shading = false,\n            height_competition = false,\n            pet_growth_reduction = false,\n            sla_transpiration = false,\n            water_growth_reduction = false,\n            nutrient_growth_reduction = false,\n            temperature_growth_reduction = false,\n            seasonal_growth_adjustment = false,\n            radiation_growth_reduction = false)\nb1, b14, t1, t14 = calc_total_biomass(included)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"Only potential growth\")\nlines!(t1, b1; linestyle = :dash, label = \"1 day\")\nlines!(t14, b14; label = \"14 days\", color = :red, alpha = 0.5)\naxislegend(\"Time step\"; position = :lt, framevisible = false)\nfig","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"########### Only mowing\nincluded = (;\n            senescence = false,\n            senescence_season = false,\n            potential_growth = false,\n            clonalgrowth = false,\n            mowing = true,\n            grazing = false,\n            lowbiomass_avoidance = false,\n            belowground_competition = false,\n            community_self_shading = false,\n            height_competition = false,\n            pet_growth_reduction = false,\n            sla_transpiration = false,\n            water_growth_reduction = false,\n            nutrient_growth_reduction = false,\n            temperature_growth_reduction = false,\n            seasonal_growth_adjustment = false,\n            radiation_growth_reduction = false)\nb1, b14, t1, t14 = calc_total_biomass(included)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"Only mowing\")\nlines!(t1, b1; linestyle = :dash, label = \"1 day\")\nlines!(t14, b14; label = \"14 days\", color = :red, alpha = 0.5)\naxislegend(\"Time step\"; position = :rt, framevisible = false)\nfig","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"########### Only grazing\nincluded = (;\n            senescence = false,\n            senescence_season = false,\n            potential_growth = false,\n            clonalgrowth = false,\n            mowing = false,\n            grazing = true,\n            lowbiomass_avoidance = false,\n            belowground_competition = false,\n            community_self_shading = false,\n            height_competition = false,\n            pet_growth_reduction = false,\n            sla_transpiration = false,\n            water_growth_reduction = false,\n            nutrient_growth_reduction = false,\n            temperature_growth_reduction = false,\n            seasonal_growth_adjustment = false,\n            radiation_growth_reduction = false)\nb1, b14, t1, t14 = calc_total_biomass(included)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"Only grazing\")\nlines!(t1, b1; label = \"1 day\", color = :red, alpha = 0.5)\nlines!(t14, b14; label = \"14 days\", linestyle = :dash)\naxislegend(\"Time step\"; position = :rt, framevisible = false)\nfig","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"########### Only potential growth + radiation reduction\nincluded = (;\n            senescence = false,\n            senescence_season = false,\n            potential_growth = true,\n            clonalgrowth = false,\n            mowing = false,\n            grazing = false,\n            lowbiomass_avoidance = false,\n            belowground_competition = false,\n            community_self_shading = false,\n            height_competition = false,\n            pet_growth_reduction = false,\n            sla_transpiration = false,\n            water_growth_reduction = false,\n            nutrient_growth_reduction = false,\n            temperature_growth_reduction = false,\n            seasonal_growth_adjustment = false,\n            radiation_growth_reduction = true)\nb1, b14, t1, t14 = calc_total_biomass(included)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"Only potential growth + radiation reduction\")\nlines!(t1, b1; label = \"1 day\", color = :red, alpha = 0.5)\nlines!(t14, b14; label = \"14 days\", linestyle = :dash)\naxislegend(\"Time step\"; position = :lt, framevisible = false)\nfig","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"########### Everything\nplotID = \"HEG01\"\nincluded = (;)\nb1, b14, t1, t14 = calc_total_biomass(included; plotID)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"plotID: $plotID\")\nlines!(t1, b1; label = \"1 day\", color = :red, alpha = 0.5)\nlines!(t14, b14; label = \"14 days\", linestyle = :dash)\naxislegend(\"Time step\"; position = :lt, framevisible = true)\nfig","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"########### Everything\nplotID = \"HEG07\"\nincluded = (;)\nb1, b14, t1, t14 = calc_total_biomass(included; plotID)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"plotID: $plotID\")\nlines!(t1, b1; label = \"1 day\", color = :red, alpha = 0.5)\nlines!(t14, b14; label = \"14 days\", linestyle = :dash)\naxislegend(\"Time step\"; position = :lt, framevisible = true)\nfig","category":"page"},{"location":"time_step/","page":"Time step","title":"Time step","text":"########### Everything\nplotID = \"HEG08\"\nincluded = (;)\nb1, b14, t1, t14 = calc_total_biomass(included; plotID)\nfig = Figure()\nAxis(fig[1, 1], ylabel = \"Aboveground dry biomass [kg ha⁻¹]\",\n                xlabel = \"Time [year]\",\n                title = \"plotID: $plotID\")\nlines!(t1, b1; label = \"1 day\", color = :red, alpha = 0.5)\nlines!(t14, b14; label = \"14 days\", linestyle = :dash)\naxislegend(\"Time step\"; position = :lt, framevisible = true)\nfig","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/#How-to-turn-off-subprocesses-of-the-model","page":"Turn-off subprocesses","title":"How to turn-off subprocesses of the model","text":"","category":"section"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"Mainly for debugging purposes, it is possible to turn off subprocesses of the model. This can be useful to understand the effect of a single subprocess on the model output. ","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"Load packages:","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"import GrasslandTraitSim as sim\nusing CairoMakie\nusing Unitful\nusing Statistics","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"All the subprocesses that can be turned off are listed here:","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"sim.create_included()","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"We have to write all the processes that we want to turn off in the included named tuple. By default, all other processes are included. Here we want to exclude the potential growth of the species. The named tuple looks as follows:","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"included = (;\n    potential_growth = false,\n)\n\ntrait_input = sim.input_traits()\ninput_obj = sim.validation_input(; included, plotID = \"HEG01\", nspecies = length(trait_input.amc));\np = sim.SimulationParameter()","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"Run the simulation and let's visualize the biomass dynamic without potential growth:","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"sol = sim.solve_prob(; input_obj, p, trait_input);\n\nspecies_biomass = dropdims(mean(sol.output.biomass; dims = (:x, :y)); dims = (:x, :y))\ntotal_biomass = vec(sum(species_biomass; dims = :species))\n\nfig, _ = lines(sol.simp.output_date_num, ustrip.(total_biomass), color = :darkgreen, linewidth = 2;\n      axis = (; ylabel = \"Aboveground dry biomass [kg ha⁻¹]\", \n                xlabel = \"Date [year]\"))\nfig\nsave(\"biomass_no_pot_growth.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_turnoff_subprocesses/","page":"Turn-off subprocesses","title":"Turn-off subprocesses","text":"(Image: )","category":"page"},{"location":"Modelling_API/biomass_dynamic/","page":"Overview","title":"Overview","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/biomass_dynamic/#Biomass-dynamics","page":"Overview","title":"Biomass dynamics","text":"","category":"section"},{"location":"Modelling_API/biomass_dynamic/","page":"Overview","title":"Overview","text":"<pre class=\"mermaid\">\nflowchart LR\n    A[growth] --> B[change in biomass of one day]\n    C[senescence] --> B\n    D[mowing, grazing] --> B\n    E[\"clonal growth\\n(once per year)\"] --> B\n    B --update--> K[state: biomass]\n    K --+ one day--> B\n</pre>\n\n<script type=\"module\">\n    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n</script> ","category":"page"},{"location":"Modelling_API/biomass_dynamic/","page":"Overview","title":"Overview","text":"Note: Forcing functions and influence of soil water are omitted in this diagram.","category":"page"},{"location":"Modelling_API/biomass_dynamic/","page":"Overview","title":"Overview","text":"The change of the biomass of the plant species is modelled by...","category":"page"},{"location":"Modelling_API/biomass_dynamic/","page":"Overview","title":"Overview","text":"growth processes\nsenescence of biomass\nbiomass removal by mowing and grazing\nonce per year and only if more than one patch is simulated: clonal growth","category":"page"},{"location":"Modelling_API/growth_potential_growth/","page":"Growth: potential growth","title":"Growth: potential growth","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/growth_potential_growth/#Potential-growth","page":"Growth: potential growth","title":"Potential growth","text":"","category":"section"},{"location":"Modelling_API/growth_potential_growth/","page":"Growth: potential growth","title":"Growth: potential growth","text":"potential_growth!\ncalculate_LAI!","category":"page"},{"location":"Modelling_API/growth_potential_growth/#GrasslandTraitSim.potential_growth!","page":"Growth: potential growth","title":"GrasslandTraitSim.potential_growth!","text":"potential_growth!(\n;\n    container,\n    above_biomass,\n    actual_height,\n    PAR\n)\n\n\nCalculate the total potential growth of the plant community.\n\nbeginalign*\nG_pot txy = PAR_txy cdot RUE_max cdot fPARi_txy \nfPARi_txy = left(1 - expleft(-k cdot LAI_tot txyright)right) cdot\n    frac1\n    1 + expleft(beta_comH cdot left(alpha_comH - H_cwm txyright)right)\nendalign*\n\nParameter, see also SimulationParameter:\n\nRUE_max (RUE_max) maximum radiation use efficiency [kg MJ⁻¹]\nk (k) extinction coefficient [-]\nalpha_height lai (self_shading_severity) is the community weighted mean height, where the community height growth reducer is 0.5 [m]\nbeta_comH (β_com_height) is the slope of the logistic function that relates the community weighted mean height to the community height growth reducer [m⁻¹]\n\nVariables:\n\nPAR_txy (PAR) photosynthetically active radiation [MJ ha⁻¹]\nLAI_tot txy (LAItot) total leaf area index, see calculate_LAI! [-]\n\nOutput:\n\nG_pot txy (potgrowth_total) total potential growth of the plant community [kg ha⁻¹]\n\nNote: The community height growth reduction factor is the second part of the fPARi_txy equation.\n\n(Image: ) (Image: ) (Image: ) (Image: )\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_potential_growth/#GrasslandTraitSim.calculate_LAI!","page":"Growth: potential growth","title":"GrasslandTraitSim.calculate_LAI!","text":"calculate_LAI!(; container, above_biomass)\n\n\nCalculate the leaf area index of all species.\n\nbeginalign\nLAI_txys = B_txys cdot SLA_s cdot fracLBP_sABP_s \nLAI_tot txy = sum_s=1^S LAI_txys\nendalign\n\nVariables:\n\nB_txys (biomass) biomass of each species  [kg ha⁻¹]\nSLA_s (sla) specific leaf area [m² g⁻¹]\nLBP_s (lbp) leaf biomass per plant biomass [-]\nABP_s (abp) aboveground biomass per plant biomass [-]\n\nThere is a unit conversion from the SLA_s and the biomass B_txys to the unitless LAI_txys involved.\n\nOutput:\n\nLAI_txys (LAIs) leaf area index of each species [-]\nLAI_tot txy (LAItot) total leaf area index of the plant community [-]\n\n(Image: )\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/growth_species_specific/#Species-specific-growth-adjustment","page":"Growth: species-specific adjustment","title":"Species-specific growth adjustment","text":"","category":"section"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"<div class=\"mermaid\">\nflowchart LR\n    F[⇅ light competition] --> C[[species-specific adjustment]]\n    H[↓ water stress] -->  C\n    I[↓ nutrient stress] --> C\n    L[↓ cost for investment into roots] --> C;\n</div>","category":"page"},{"location":"Modelling_API/growth_species_specific/#Light-competition","page":"Growth: species-specific adjustment","title":"Light competition","text":"","category":"section"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"<div class=\"mermaid\">\nflowchart LR\n    L[Leaf area index] -->|species with more leaf area\\nget higher share| F\n    K[trait: height] -->|taller plants get\\nmore light| F\n    F[⇅ light competition] --> C[[species-specific adjustment]]\n</div>","category":"page"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"light_competition!","category":"page"},{"location":"Modelling_API/growth_species_specific/#GrasslandTraitSim.light_competition!","page":"Growth: species-specific adjustment","title":"GrasslandTraitSim.light_competition!","text":"light_competition!(\n;\n    container,\n    above_biomass,\n    actual_height\n)\n\n\nCalculate the distribution of potential growth to each species based on share of the leaf area index and the height of each species.\n\nbeginalign*\nLIG_txys = fracLAI_txysLAI_tot txy cdot left(fracH_sH_cwm txy right) ^ beta_H \nH_cwm txy = sum_s=1^SfracB_txysB_tot txy cdot H_s\nendalign*\n\nParameter, see also SimulationParameter:\n\nbeta_H (β_height) controls how strongly taller plants gets more light for growth [-]\n\nVariables:\n\nLAI_txys (LAI) leaf area index of species s at time t and patch xy [-]\nLAI_tot txy (LAItot) total leaf area index, see calculate_LAI! [-]\nB_txys (biomass)biomass of each species [kg ha⁻¹]\nH_s (height) potential plant height [m]\nH_cwm txy (height_cwm) community weighted mean height [m]\n\nOutput:\n\nLIG_txys (light_competition) light competition factor, distributes total potential growth to each species [-]\n\nTaller plants get more light and can therefore growth more than smaller plants. This is modelled by the influence of the potential height in relation to the community weighted mean potential height. The strenght of this relationship is modelled with the parameter beta_H.\n\nThe potential height refers to the height that the plant would reach if it would not be limited by other factors.\n\n(Image: light competition)\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"","category":"page"},{"location":"Modelling_API/growth_species_specific/#Water-stress","page":"Growth: species-specific adjustment","title":"Water stress","text":"","category":"section"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"<div class=\"mermaid\">\nflowchart LR\n    W[↓ water stress] \n    A[\"soil water content W [mm]\"]\n    K[\"water holding capacity WHC [mm]\"]\n    L[\"permanent wilting point PWP [mm]\"]\n    P[\"scaled soil water content Wsc [-]\"]\n    R[trait: root surface area /\\n belowground biomass]\n    S[trait: specific leaf area]\n\n    A --> P\n    K --> P\n    L --> P\n    P --> W\n    R ---> W\n    S ---> W;\n</div>","category":"page"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"The species differ in their response to water stress by the different trait values of the specific leaf area and the root surface areas per above ground biomass. The values of both response functions are multiplied to get factor that reduces the growth. ","category":"page"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"It is implemented in water_reduction!.","category":"page"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"water_reduction!","category":"page"},{"location":"Modelling_API/growth_species_specific/#GrasslandTraitSim.water_reduction!","page":"Growth: species-specific adjustment","title":"GrasslandTraitSim.water_reduction!","text":"water_reduction!(; container, W, PWP, WHC)\n\n\nReduction of growth based on the plant available water and the traits specific leaf area and root surface area per belowground biomass.\n\nReduction of growth due to stronger water stress for plants with lower specific root surface area per above ground biomass (srsa).\n\n(Image: Graphical overview of the functional response)\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_species_specific/#Nutrient-stress","page":"Growth: species-specific adjustment","title":"Nutrient stress","text":"","category":"section"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"<div class=\"mermaid\">\nflowchart LR\n    S[↓ nutrient stress] \n    N[nutrient index]\n    R[trait: root surface area /\\n belowground biomass]\n    A[trait: arbuscular mycorrhizal colonisation]\n    K[nutrient competition factor]\n    L[plant available nutrients]\n\n    N --> L\n    K --> L\n    L --> S\n    R --> S\n    A --> S;\n\n    B[biomass] \n    T[trait similarity of\\n root surface area / aboveground biomass\\nand arbuscular mycorrhizal colonisation]\n\n\n    T -->|species with similar\\ntraits compete more\\nstrongly for the same resources| K\n    B --> K;\n</div>","category":"page"},{"location":"Modelling_API/growth_species_specific/#below_competition","page":"Growth: species-specific adjustment","title":"Nutrient competition factor","text":"","category":"section"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"below_ground_competition!","category":"page"},{"location":"Modelling_API/growth_species_specific/#GrasslandTraitSim.below_ground_competition!","page":"Growth: species-specific adjustment","title":"GrasslandTraitSim.below_ground_competition!","text":"below_ground_competition!(; container, total_biomass)\n\n\nModels the density-dependent competiton for nutrients between plants.\n\nPlant available nutrients are reduced if a large biomass of plant species with similar root surface area per belowground biomass (srsa) and arbuscular mycorrhizal colonisation (amc) is already present.\n\nWe define for N species the trait similarity matrix TS in 01^N times N with trait similarities between the species i and j (ts_ij), where ts_ij = ts_ji and ts_ii = 1:\n\nTS =\nbeginbmatrix\n    ts_11  ts_12  dots    ts_1N \n    ts_21  ts_22    \n    vdots    ddots    \n    ts_N1     ts_NN \nendbmatrix\n= beginbmatrix\n    1  ts_12  dots    ts_1N \n    ts_21  1    \n    vdots    ddots    \n    ts_N1     1 \nendbmatrix\n\nand the biomass vector B in 0textkg ha¹ textkg ha¹^N with the biomass of each plant species b:\n\nB =\nbeginbmatrix\n    b_1 \n    b_2 \n    vdots \n    b_N \nendbmatrix\n\nThen, we multiply the trait similarity matrix TS with the biomass vector B:\n\nTS cdot B =\nbeginbmatrix\n    1  ts_12  dots    ts_1N \n    ts_21  1    \n    vdots    ddots    \n    ts_N1     1 \nendbmatrix cdot\nbeginbmatrix\n    b_1 \n    b_2 \n    vdots \n    b_N \nendbmatrix =\nbeginbmatrix\n    1 cdot b_1 + ts_12 cdot b_2 + dots + ts_1N cdot b_N \n    ts_21 cdot b_1 + 1 cdot b_2 + dots + ts_2N cdot b_N \n    vdots \n    ts_N1 cdot b_1 + ts_N2 cdot b_2 + dots + 1 cdot b_N \nendbmatrix\n\nThe factors are then calculated as follows:\n\ntextnutrients_adj_factor =\n    left(fracTS cdot Btextα_TSBright) ^\n    - textβ_TSB \n\nThe reduction factors control the density and increases the \"functional dispersion\" of the root surface area per belowground biomass and the arbuscular mycorrhizal colonisation.\n\nThe TS matrix is computed before the start of the simulation (calculation of trait similarity) and includes the traits arbuscular mycorrhizal colonisation rate (amc) and the root surface area devided by the above ground biomass (srsa).\n\nnutrients_adj_factor is the factor that adjusts the plant available nutrients [-]\nTS is the trait similarity matrix, TS in 01^N times N [-]\nB is the biomass vector, B in 0 ^N [kg ha⁻¹]\nβ_TSB is the exponent of the below ground competition factor [-]\n\n(Image: )\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_species_specific/#Growth-reduction-due-to-nutrient-stress","page":"Growth: species-specific adjustment","title":"Growth reduction due to nutrient stress","text":"","category":"section"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"The species differ in the response to nutrient availability by different proportion of mycorrhizal colonisations and root surface per above ground biomass. The maximum of both response curves is used for the nutrient reduction function. It is assumed that the plants needs either many fine roots per above ground biomass or have a strong symbiosis with mycorrhizal fungi. ","category":"page"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"It is implemented in nutrient_reduction!.","category":"page"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"nutrient_reduction!","category":"page"},{"location":"Modelling_API/growth_species_specific/#GrasslandTraitSim.nutrient_reduction!","page":"Growth: species-specific adjustment","title":"GrasslandTraitSim.nutrient_reduction!","text":"nutrient_reduction!(; container, nutrients)\n\n\nReduction of growth based on plant available nutrients and the traits arbuscular mycorrhizal colonisation and root surface area per belowground biomass.\n\nReduction of growth due to stronger nutrient stress for lower arbuscular mycorrhizal colonisation (AMC).\n\nthe strength of the reduction is modified by the parameter δ_amc\n\nδ_amc equals 1: (Image: Graphical overview of the AMC functional response)\n\nδ_amc equals 0.5: (Image: Graphical overview of the AMC functional response)\n\nReduction of growth due to stronger nutrient stress for lower specific root surface area per belowground biomass (srsa).\n\nthe strength of the reduction is modified by the parameter δ_nrsa\n\nδ_nrsa equals 1: (Image: Graphical overview of the functional response)\n\nδ_nrsa equals 0.5: (Image: Graphical overview of the functional response)\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"<script type=\"module\">\n    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n</script> ","category":"page"},{"location":"Modelling_API/growth_species_specific/#Cost-for-investment-into-roots-and-mycorrhiza","page":"Growth: species-specific adjustment","title":"Cost for investment into roots and mycorrhiza","text":"","category":"section"},{"location":"Modelling_API/growth_species_specific/","page":"Growth: species-specific adjustment","title":"Growth: species-specific adjustment","text":"root_investment!","category":"page"},{"location":"Modelling_API/growth_species_specific/#GrasslandTraitSim.root_investment!","page":"Growth: species-specific adjustment","title":"GrasslandTraitSim.root_investment!","text":"root_investment!(; container)\n\n\nInvestment into root and mycorriza\n\nbeginalign\ninvest = exp(kappa_red amc cdot acm) cdot abp \nendalign\n\n(Image: )\n\n\n\n\n\n","category":"function"},{"location":"tutorials/how_to_heterogeneous_site_management/","page":"Heterogenous site or management conditions","title":"Heterogenous site or management conditions","text":"CurrentModule = GrasslandTraitSim","category":"page"},{"location":"tutorials/how_to_heterogeneous_site_management/#How-to-model-heterogeneous-site-conditions-or-management","page":"Heterogenous site or management conditions","title":"How to model heterogeneous site conditions or management","text":"","category":"section"},{"location":"tutorials/how_to_heterogeneous_site_management/","page":"Heterogenous site or management conditions","title":"Heterogenous site or management conditions","text":"This tutorial assumes that you have read the basic tutorial How to prepare the input data to start a simulation. We will use an existing input object and change the number of patches to two and remove the management in the second patch.","category":"page"},{"location":"tutorials/how_to_heterogeneous_site_management/","page":"Heterogenous site or management conditions","title":"Heterogenous site or management conditions","text":"import GrasslandTraitSim as sim\n\nusing Unitful\nusing Statistics\nusing CairoMakie\n\npatch_xdim = 2 \npatch_ydim = 1\n\ninput_obj_prep = sim.validation_input(;\n    plotID = \"HEG01\", nspecies = 25,\n    trait_seed = 99);\n\n# --------------- change the number of patches\nsimp_prep = Dict()\nfor k in keys(input_obj_prep.simp)\n    simp_prep[k] = input_obj_prep.simp[k]\nend\nsimp_prep[:patch_xdim] = patch_xdim\nsimp_prep[:patch_ydim] = patch_ydim\nsimp_prep[:npatches] = patch_xdim * patch_ydim\nsimp_prep[:ts] = input_obj_prep.simp.ts\nsimp = NamedTuple(simp_prep)\n\n# --------------- change the management\ndaily_input_prep = Dict()\nfor k in keys(input_obj_prep.input)\n    daily_input_prep[k] = input_obj_prep.input[k]\nend\n\nmowing_prep = daily_input_prep[:CUT_mowing]\nCUT_mowing = fill(NaN * u\"m\", length(mowing_prep), patch_xdim, patch_ydim)\nCUT_mowing[:, 1, 1] .= mowing_prep\n\ngrazing_prep = daily_input_prep[:LD_grazing]\nLD_grazing = fill(NaN / u\"ha\", length(grazing_prep), patch_xdim, patch_ydim)\nLD_grazing[:, 1, 1] .= grazing_prep\n\ndaily_input_prep[:CUT_mowing] = CUT_mowing\ndaily_input_prep[:LD_grazing] = LD_grazing\ninput = NamedTuple(daily_input_prep)\n\n# --------------- add everything together\ninput_obj = (; input, simp, site = input_obj_prep.site)\n\np = sim.SimulationParameter() \n\nsol = sim.solve_prob(; input_obj, p);\n\npatch_biomass = dropdims(sum(sol.output.biomass; dims = :species); dims = :species)\n\nbegin\n    fig = Figure()\n    Axis(fig[1, 1];\n         ylabel = \"Aboveground dry biomass [kg ha⁻¹]\", \n         xlabel = \"Date [year]\")\n\n    for x in Base.OneTo(patch_xdim)\n        for y in Base.OneTo(patch_ydim)\n            lines!(sol.simp.output_date_num, vec(ustrip.(patch_biomass[:, x, y]));)  \n        end\n    end\n    \n    fig\nend\nsave(\"het_management.svg\", fig); nothing # hide","category":"page"},{"location":"tutorials/how_to_heterogeneous_site_management/","page":"Heterogenous site or management conditions","title":"Heterogenous site or management conditions","text":"(Image: )","category":"page"},{"location":"variables/#Influence-of-intermediate-variables","page":"Visualize model components","title":"Influence of intermediate variables","text":"","category":"section"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"CurrentModule = GrasslandTraitSim","category":"page"},{"location":"variables/#Trade-off-between-investing-in-roots-and-experiencing-nutrient-stress","page":"Visualize model components","title":"Trade-off between investing in roots and experiencing nutrient stress","text":"","category":"section"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"plants with a high investment into roots have a high arbuscular mycorrhizal colonisation rate and a high root surface area per belowground biomass\nlow growth reduction due to nutrient stress    \ninvestment costs energy, this is implemented by a growth reducer that is independent of the nutrient level    \nnutrient stress is stronger if the total biomass is high, because of the strong competition for nutrients, see below_ground_competition!","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"<details><summary>show code</summary>","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"using CairoMakie\nusing Unitful\nimport GrasslandTraitSim as sim\n\nlet\n    lastn_points = 1500\n\n    trait_input = sim.input_traits();\n    input_obj = sim.validation_input(; plotID = \"HEG01\", nspecies = length(trait_input.amc), time_step_days = 1);\n    p = sim.optim_parameter()\n    sol = sim.solve_prob(; input_obj, p, trait_input);\n    t = sol.simp.mean_input_date_num[end-lastn_points:end]\n    t_out = sol.simp.output_date_num[end-lastn_points:end]\n    total_biomass = ustrip.(vec(sum(sol.output.biomass[end-lastn_points:end, 1, 1, :]; \n                                    dims = :species)))\n\n\n    fig = Figure(size = (900, 800))\n\n    Axis(fig[1, 1:2];\n         xticklabelsvisible = false, xticksvisible = true,\n         xticks = 2018:1:2022, ylabel = \"Total biomass\\n[kg ha⁻¹]\")\n    lines!(t_out, total_biomass;\n            linewidth = 2, color = :black)\n\n\n    c = vec(sol.calc.root_invest_amc .* sol.calc.root_invest_srsa)\n    colorrange = (minimum(c), maximum(c))\n    species_order = sortperm(c)\n    colormap = :redsblues\n\n    Axis(fig[2, 1:2];\n         xticks = 2018:1:2022,\n         ylabel = \"Growth reduction factor\\ndue to nutrient stress [-]\\n← stronger reduction, less reduction →\",\n         xlabel = \"Time [year]\")\n    for s in sortperm(c)[[1, 2, 3, 4, 5, 39, 40, 41, 42, 43]]\n        lines!(t, vec(sol.output.nutrient_growth[end-lastn_points:end, 1, 1, s]);\n               colorrange, colormap, color = c[s], linewidth = 1)\n    end\n\n    ax1 = Axis(fig[3, 1];\n        xlabel = \"Root suface area per\\nbelowground biomass [m² g⁻¹]\",\n        ylabel = \"Growth reduction due to investment\\ninto roots, single effects [-]\\n← stronger reduction, less reduction →\")\n    scatter!(ustrip.(sol.traits.srsa), sol.calc.root_invest_srsa;\n            color = c, colormap,\n            markersize = 10)\n\n    ax2 = Axis(fig[3, 2];\n        xlabel = \"Arbuscular mycorrhiza\\ncolonisation rate [-]\",\n        yticklabelsvisible = false)\n    scatter!(sol.traits.amc, sol.calc.root_invest_amc;\n            color = c, colormap,\n            markersize = 10)\n    linkyaxes!(ax1, ax2)\n\n    Colorbar(fig[2:3, 3]; colorrange, colormap,\n        label = \"Growth reduction due to investment into roots, multiplicative effect of both factors [-]\\n← stronger reduction, less reduction →\")\n\n    rowsize!(fig.layout, 1, Relative(0.1))\n    rowgap!(fig.layout, 1, 5)\n    rowgap!(fig.layout, 2, 10)\n    colgap!(fig.layout, 1, 5)\n\n    fig\n    save(\"nutrient_stress.png\", fig); nothing # hide\nend","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"</details>","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"(Image: )","category":"page"},{"location":"variables/#Trade-off-between-investing-in-roots-and-experiencing-water-stress","page":"Visualize model components","title":"Trade-off between investing in roots and experiencing water stress","text":"","category":"section"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"a high root surface area per belowground biomass reduces water stress but the investment costs energy (see figure above)\na low specific leaf area (leafs are thick) reduces water stress but plants with a high specific leaf area have a higher leaf area index and can intercept more light","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"<details><summary>show code</summary>","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"using CairoMakie\nusing Unitful\nimport GrasslandTraitSim as sim\n\nlet\n    lastn_points = 1500\n\n    trait_input = sim.input_traits();\n    input_obj = sim.validation_input(; plotID = \"HEG01\", nspecies = length(trait_input.amc), time_step_days = 1,\n                                        included = (;\n                                        belowground_competition = true,\n                                        nutrient_growth_reduction = true,\n                                        water_growth_reduction = true,\n                                        root_invest = true));\n    p = sim.optim_parameter()\n    sol = sim.solve_prob(; input_obj, p, trait_input);\n    t = sol.simp.mean_input_date_num[end-lastn_points:end]\n    t_out = sol.simp.output_date_num[end-lastn_points:end]\n    total_biomass = ustrip.(vec(sum(sol.output.biomass[end-lastn_points:end, 1, 1, :];\n                                    dims = :species)))\n\n    PWP = sol.patch_variables.PWP[1, 1]\n    WHC = sol.patch_variables.WHC[1, 1]\n    water_out = vec(sol.output.water[end-lastn_points:end, 1, 1])\n\n    function get_Wsc(x; WHC, PWP)\n        return x > WHC ? 1.0 : x > PWP ? (x - PWP) / (WHC - PWP) : 0.0\n    end\n\n    water_scaled = get_Wsc.(water_out; WHC, PWP)\n\n\n    fig = Figure(size = (900, 1000))\n\n    Axis(fig[1, 1];\n        xticklabelsvisible = false, \n        xticks = 2018:1:2022, ylabel = \"Total biomass\\n[kg ha⁻¹]\")\n    lines!(t_out, total_biomass;\n            linewidth = 2, color = :black)\n\n    Axis(fig[2, 1];\n        xticklabelsvisible = false, \n        xticks = 2018:1:2022, ylabel = \"Soil water content\\nin the rooting zone \\n[mm]\")\n    lines!(t_out, ustrip.(water_out);\n            linewidth = 2, color = :blue)\n    hlines!(ustrip.([PWP, WHC]))\n    text!([t_out[1], t_out[1]], ustrip.([PWP, WHC]);\n          text = [\"PWP\", \"WHC\"],\n          align = [(:left, :bottom), (:left, :top)],\n          color = :grey)\n\n    Axis(fig[3, 1];\n        xticklabelsvisible = false, \n        xticks = 2018:1:2022, ylabel = \"Scaled water\",\n        limits = (nothing, nothing, -0.1, 1.1))\n        lines!(t_out, water_scaled;\n                linewidth = 2, color = :blue)\n\n    c = vec(sol.calc.root_invest_srsa)\n    colorrange = (minimum(c), maximum(c))\n    species_order = sortperm(c)\n    colormap = :redsblues\n    Axis(fig[4, 1];\n        xticks = 2018:1:2022, xticklabelsvisible = false, \n        ylabel = \"Growth reduction factor\\ndue to water stress [-]\\n← stronger reduction, less reduction →\")\n    for s in sortperm(c)[[1, 2, 3, 4, 5, 39, 40, 41, 42, 43]]\n        lines!(t, vec(sol.output.water_growth[end-lastn_points:end, 1, 1, s]);\n            colorrange, colormap, color = c[s], linewidth = 1)\n    end\n    Colorbar(fig[4, 2]; colorrange, colormap,\n        label = \"Growth reduction due to investment into high\\nroot surface area per belowground biomass [-]\\n← stronger reduction, less reduction →\")\n\n\n    c = ustrip.(sol.traits.sla)\n    colorrange = (minimum(c), maximum(c))\n    species_order = sortperm(c)\n    colormap = :blues\n    Axis(fig[5, 1];\n        xticks = 2018:1:2022,\n        ylabel = \"Growth reduction factor\\ndue to water stress [-]\\n← stronger reduction, less reduction →\",\n        xlabel = \"Time [year]\")\n    for s in sortperm(c)[[1, 2, 3, 4, 5, 39, 40, 41, 42, 43]]\n        lines!(t, vec(sol.output.water_growth[end-lastn_points:end, 1, 1, s]);\n            colorrange, colormap, color = c[s], linewidth = 1)\n    end\n    Colorbar(fig[5, 2]; colorrange, colormap,\n        label = \"Specific leaf area\\n[m² g⁻¹]\")\n\n    rowsize!(fig.layout, 1, Relative(0.1))\n    rowsize!(fig.layout, 2, Relative(0.15))\n    rowsize!(fig.layout, 3, Relative(0.15))\n\n    fig\n    save(\"water_stress.png\", fig); nothing # hide\nend","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"</details>","category":"page"},{"location":"variables/","page":"Visualize model components","title":"Visualize model components","text":"(Image: )","category":"page"},{"location":"Modelling_API/defoliation/","page":"Mowing and grazing","title":"Mowing and grazing","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/defoliation/#Mowing-and-grazing","page":"Mowing and grazing","title":"Mowing and grazing","text":"","category":"section"},{"location":"Modelling_API/defoliation/","page":"Mowing and grazing","title":"Mowing and grazing","text":"Biomass is removed by...","category":"page"},{"location":"Modelling_API/defoliation/","page":"Mowing and grazing","title":"Mowing and grazing","text":"🚜 mowing\n🐄 grazing","category":"page"},{"location":"Modelling_API/defoliation/","page":"Mowing and grazing","title":"Mowing and grazing","text":"","category":"page"},{"location":"Modelling_API/defoliation/#Mowing","page":"Mowing and grazing","title":"Mowing","text":"","category":"section"},{"location":"Modelling_API/defoliation/","page":"Mowing and grazing","title":"Mowing and grazing","text":"mowing!","category":"page"},{"location":"Modelling_API/defoliation/#GrasslandTraitSim.mowing!","page":"Mowing and grazing","title":"GrasslandTraitSim.mowing!","text":"mowing!(\n;\n    container,\n    mowing_height,\n    above_biomass,\n    actual_height\n)\n\n\nInfluence of mowing for plant species with different heights (height): (Image: Image of mowing effect)\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/defoliation/","page":"Mowing and grazing","title":"Mowing and grazing","text":"","category":"page"},{"location":"Modelling_API/defoliation/#Grazing","page":"Mowing and grazing","title":"Grazing","text":"","category":"section"},{"location":"Modelling_API/defoliation/","page":"Mowing and grazing","title":"Mowing and grazing","text":"grazing!","category":"page"},{"location":"Modelling_API/defoliation/#GrasslandTraitSim.grazing!","page":"Mowing and grazing","title":"GrasslandTraitSim.grazing!","text":"grazing!(; container, LD, above_biomass, actual_height)\n\n\nbeginalign\nrho = left(fracLNCMLNCM_cwmright) ^ textβ_PAL_lnc \nμₘₐₓ = κ cdot textLD \nh = frac1μₘₐₓ \na = frac1textα_GRZ^2 cdot h \ntexttotgraz = fraca cdot (sum textbiomass)^2\n                    1 + acdot hcdot (sum textbiomass)^2 \ntextshare = frac\n    rho cdot textbiomass\n    sum left rho cdot textbiomass right \ntextgraz = textshare cdot texttotgraz\nendalign\n\nLD daily livestock density [livestock units ha⁻¹]\nκ daily consumption of one livestock unit [kg], follows [9]\nρ palatability, dependent on nitrogen per leaf mass (LNCM) [-]\nα_GRZ is the half-saturation constant [kg ha⁻¹]\nequation partly based on [10]\nβ_PAL_lnc = 1.5\n\n(Image: )\n\nβ_PAL_lnc = 5\n\n(Image: )\n\nInfluence of α_GRZ: (Image: )\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/senescence/","page":"Senescence","title":"Senescence","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/senescence/#Senescence","page":"Senescence","title":"Senescence","text":"","category":"section"},{"location":"Modelling_API/senescence/","page":"Senescence","title":"Senescence","text":"senescence!\nseasonal_component_senescence","category":"page"},{"location":"Modelling_API/senescence/#GrasslandTraitSim.senescence!","page":"Senescence","title":"GrasslandTraitSim.senescence!","text":"senescence!(; container, ST, total_biomass)\n\n\nCalculate the biomass that dies due to senescence.\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/senescence/#GrasslandTraitSim.seasonal_component_senescence","page":"Senescence","title":"GrasslandTraitSim.seasonal_component_senescence","text":"seasonal_component_senescence(; container, ST)\n\n\nSeasonal factor for the senescence rate.\n\nbeginalign*\nSEN =\nbegincases\n1   textif  ST  Ψ_1 \n1+(SEN_max - 1) fracST - Ψ_1Ψ_2 - Ψ_1  textif Ψ_1  ST  Ψ_2 \nSEN_max   textif ST  Ψ_2\nendcases  \nendalign*\n\nST annual cumulative temperature [C]\nΨ₁=775  [C]\nΨ₂=3000 [C]\nSEN_max=3\n\n(Image: Seasonal component death rate)\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth/","page":"Growth: overview","title":"Growth: overview","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/growth/#Growth","page":"Growth: overview","title":"Growth","text":"","category":"section"},{"location":"Modelling_API/growth/","page":"Growth: overview","title":"Growth: overview","text":"<div class=\"mermaid\">\nflowchart LR\n    A[[potential growth]] ==> D(actual growth)\n    B[[community adjustment by environmental and seasonal factors]] ==> D\n    C[[species-specific adjustment]] ==> D\n    subgraph \" \"\n    L[↓ radiation] -.-> B\n    M[↓ temperature] -.-> B\n    N[⇅ seasonal factor] -.-> B\n    end\n    subgraph \" \"\n    F[⇅ light competition] -.-> C\n    H[↓ water stress] -.-> C\n    I[↓ nutrient stress] -.-> C\n    P[↓ investment into roots and mycorrhiza] -.-> C\n    end;\n</div>","category":"page"},{"location":"Modelling_API/growth/","page":"Growth: overview","title":"Growth: overview","text":"growth!","category":"page"},{"location":"Modelling_API/growth/#GrasslandTraitSim.growth!","page":"Growth: overview","title":"GrasslandTraitSim.growth!","text":"growth!(\n;\n    t,\n    container,\n    above_biomass,\n    total_biomass,\n    actual_height,\n    W,\n    nutrients,\n    WHC,\n    PWP\n)\n\n\nCalculates the growth of the plant species.\n\nThe growth of the plants is modelled by...\n\nPotential growth\nCommunity growth adjustment by environmental and seasonal factors\nSpecies-specific growth adjustment\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/growth/","page":"Growth: overview","title":"Growth: overview","text":"<script type=\"module\">\n    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n</script> ","category":"page"},{"location":"Modelling_API/water/","page":"Water dynamics","title":"Water dynamics","text":"CurrentModule=GrasslandTraitSim","category":"page"},{"location":"Modelling_API/water/#Water-dynamics","page":"Water dynamics","title":"Water dynamics","text":"","category":"section"},{"location":"Modelling_API/water/","page":"Water dynamics","title":"Water dynamics","text":"<pre class=\"mermaid\">\nflowchart LR\n    A[precipitation] --> B[change in soil water of one day]\n    C[evapotranspiration] --> B\n    J[evaporation] --> C\n    L[transpiration] --> C\n    D[runoff/drainage] --> B\n    B --update--> K[state: soil water]\n    K --+ one day--> B\n</pre>\n\n<script type=\"module\">\n    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n</script> ","category":"page"},{"location":"Modelling_API/water/","page":"Water dynamics","title":"Water dynamics","text":"change_water_reserve\ntranspiration\nevaporation","category":"page"},{"location":"Modelling_API/water/#GrasslandTraitSim.change_water_reserve","page":"Water dynamics","title":"GrasslandTraitSim.change_water_reserve","text":"change_water_reserve(\n;\n    container,\n    patch_biomass,\n    water,\n    precipitation,\n    PET,\n    WHC,\n    PWP\n)\n\n\nModels the change of the water reserve in the soil within one day.\n\nPrecipitation fills the water reserve (precipitation).\n\nThe water reserve cannot exceed the water holding capacity (WHC). If the water reserve is higher than the WHC the water will drain from the soil (drain).\n\nThe actual evapotranspiration (AET) consists of the evaporation and the transpiration. Which of the two processes is more important depends on the plant cover that is simulated by the total leaf area index (LAItot).\n\nThe transpiration (ATr) is limited by the plant available water (W) and the potential evapotranspiration (PET) whereas the evaporation (AEv) is only limited by the potential evapotranspiration (PET).\n\nThe change of the water reserve is calculated as follows:\n\nbeginalign\n    textAET =\n        minleft(textwater cdot frac1d textATr + textAEv right) \n    textdrain =\n        maxleft(\n            textwater cdot frac1d +\n            textprecipitation -\n            textWHC cdot frac1d -\n            textAET 0 right) \n    textdu_water = textprecipitation - textdrain - textAET\nendalign\n\nNote the unit change of the soil water content water and the water holding capacity WHC from [mm] to [mm] to compare these values to water reserve changes per day.\n\nwater is the soil water content [mm]\ndu_water is the change of the water reserve in the soil [mm]\nprecipitation is the precipitation [mm]\ndrain is the drainage of water from the soil [mm]\nAET is the actual evapotranspiration [mm]\nATr is the actual transpiration of water from the soil [mm]\nAEv is the actual evaporation of water from the soil [mm]\nWHC is the water holding capacity of the soil [mm]\nPWP is the permanent wilting point of the soil [mm]\nPET is the potential evapotranspiration [mm]\nLAItot is the total leaf area index of all plants [-]\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/water/#GrasslandTraitSim.transpiration","page":"Water dynamics","title":"GrasslandTraitSim.transpiration","text":"transpiration(\n;\n    container,\n    patch_biomass,\n    water,\n    PWP,\n    WHC,\n    PET,\n    LAItot\n)\n\n\nTranspiration of water from the plants.\n\nThe transpiration is dependent on the plant available water (W), potential evapotranspiration (PET) and a effect of the community weighted mean specific leaf area (sla_effect).\n\nIf the community weighted mean specific leaf area is high (many plant individuals with thin leaves), a higher transpiration is assumed.\n\nbeginalign\n    textW = fractextwater - textPWPtextWHC - textPWP \n    textsla_effect =\n        left(fractextcwm_slatextα_TR_sla right)^textβ_TR_sla \n    textATr =\n        textW cdot textPET cdot textsla_effect cdot\n        minleft(1 fractextLAItot3 right)\nendalign\n\nATr is the actual transpiration of water from the soil [mm]\nW is the plant available water [-]\nwater is the soil water content [mm]\nWHC is the water holding capacity of the soil [mm]\nPWP is the permanent wilting point of the soil [mm]\nPET is the potential evapotranspiration [mm]\nLAItot is the total leaf area index of all plants [-]\nsla_effect is the effect of the community weighted specific leaf area on the transpiration, can range from 0 (no transpiraiton at all) to ∞ (very strong transpiration) [-]\ncwm_sla is the community weighted mean specific leaf area [m² kg⁻¹]\nα_TR_sla is a specific leaf area, if the cwm_sla equals α_TR_sla the sla_effect is 1 [m² kg⁻¹]\nβ_TR_sla is the exponent in the sla_effect function and influences how strong a cwm_sla that deviates from α_TR_sla changes the sla_effect [-]\n\n\n\n\n\n","category":"function"},{"location":"Modelling_API/water/#GrasslandTraitSim.evaporation","page":"Water dynamics","title":"GrasslandTraitSim.evaporation","text":"evaporation(; water, WHC, PET, LAItot)\n\n\nEvaporation of water from the soil.\n\ntextAEv =\n    fractextwatertextWHC cdot textPET cdot\n    left1 - minleft(1 fractextLAItot3 right) right\n\nAEv is the actual evaporation of water from the soil [mm]\nwater is the soil water content [mm]\nWHC is the water holding capacity of the soil [mm]\nPET is the potential evapotranspiration [mm]\nLAItot is the total leaf area index of all plants [-]\n\n\n\n\n\n","category":"function"},{"location":"#GrasslandTraitSim.jl","page":"Home","title":"GrasslandTraitSim.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: License: GPL v3)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for simulating grassland dynamics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Author: Felix Nößler\nLicence: GPL-3.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please refer to the documentation for more information about the grassland simulation model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here are slides from presentations that show concepts of the models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"European Conference on Ecological Modelling 2023\nBiodiversity Exploratories Assembly 2024","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Quick-install","page":"Home","title":"Quick install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download Julia.\nLaunch Julia and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(url=\"https://github.com/felixnoessler/GrasslandTraitSim.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Compatibility: The simulations were tested with Julia 1.10. I recommend using this version.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information on installing unregistered packages, see here. Here, you can browse the different versions of GrasslandTraitSim.jl: tags. ","category":"page"},{"location":"#Run-simulations","page":"Home","title":"Run simulations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import GrasslandTraitSim as sim\n\ntrait_input = sim.input_traits();\nnspecies = length(trait_input.amc)\ninput_obj = sim.validation_input(; plotID = \"HEG01\", nspecies);\np = sim.SimulationParameter();\nsol = sim.solve_prob(; input_obj, p, trait_input);\nsol.output.biomass","category":"page"}]
}
