function exlude_parameter(; input_obj)
    @unpack likelihood_included, included, npatches = input_obj.simp

    excl_p = Symbol[]
    if !likelihood_included.biomass
        append!(excl_p, [:b_biomass])
    end

    if !likelihood_included.trait
        append!(excl_p, [:b_sla, :b_lncm, :b_amc, :b_height, :b_rsa_above])
    end

    if !included.potential_growth
        append!(excl_p, [:RUE_max, :k])
    end

    if isone(npatches) || !included.clonalgrowth
        append!(excl_p, [:clonalgrowth_factor])
    end

    if !included.radiation_red
        append!(excl_p, [:Œ≥1, :Œ≥2])
    end

    if !included.temperature_growth_reduction
        append!(excl_p, [:T‚ÇÄ, :T‚ÇÅ, :T‚ÇÇ, :T‚ÇÉ])
    end

    if !included.season_red
        append!(excl_p, [:SEA‚Çò·µ¢‚Çô, :SEA‚Çò‚Çê‚Çì, :ST‚ÇÅ, :ST‚ÇÇ])
    end

    if !included.water_growth_reduction
        water_names = [:œï_sla, :Œ∑_min_sla, :Œ∑_max_sla, :Œ≤_Œ∑_sla, :Œ≤_sla, :Œ¥_wrsa, :Œ¥_sla]
        append!(excl_p, water_names)
    end

    if !included.nutrient_growth_reduction
        nutrient_names = [:maxtotalN, :œï_amc, :Œ∑_min_amc, :Œ∑_max_amc, :Œ∫_min_amc, :Œ≤_Œ∫Œ∑_amc, :Œ≤_amc, :Œ¥_amc, :Œ¥_nrsa]
        append!(excl_p, nutrient_names)
    end

    if !included.nutrient_growth_reduction && !included.water_growth_reduction
        append!(excl_p, [:œï_rsa, :Œ∑_min_rsa, :Œ∑_max_rsa, :Œ∫_min_rsa, :Œ≤_Œ∫Œ∑_rsa, :Œ≤_rsa])
    end

    if !included.pet_growth_reduction
        append!(excl_p, [:Œ±_pet, :Œ≤_pet])
    end

    if !included.sla_transpiration
        append!(excl_p, [:sla_tr, :sla_tr_exponent])
    end

    if !included.belowground_competition
        append!(excl_p, [:biomass_dens, :belowground_density_effect])
    end

    if !included.grazing
        append!(excl_p, [:leafnitrogen_graz_exp, :Œ∫])
    end

    if !included.trampling
        append!(excl_p, [:trampling_factor, :trampling_height_exp])
    end

    if !included.trampling && !included.grazing
        append!(excl_p, [:grazing_half_factor])
    end

    if !included.mowing
        mowing_names = [:mowing_mid_days, :mowfactor_Œ≤]
        append!(excl_p, mowing_names)
    end

    if !included.grazing && !included.mowing
        append!(excl_p, [:lowbiomass, :lowbiomass_k])
    end

    if !included.senescence
        senescence_names = [:Œ±_sen, :Œ≤_sen, :Œ±_ll, :Œ≤_ll]
        append!(excl_p, senescence_names)
    end

    if !included.senescence || !included.senescence_season
        append!(excl_p, [:Œ®‚ÇÅ, :Œ®‚ÇÇ, :SEN‚Çò‚Çê‚Çì])
    end

    if !included.community_height_red
        append!(excl_p, [:Œ≤_community_height, :Œ±_community_height])
    end

    if !included.height_competition
        append!(excl_p, [:height_strength_exp])
    end

    return excl_p
end

function calibrated_parameter(; input_obj = nothing)
    p = (;
        # Œ±_sen = (Uniform(0, 0.1), as(Real, 0.0, 0.1), u"d^-1"),
        Œ≤_sen = (Uniform(0.0, 1.0), asùïÄ, NoUnits),
        # Œ®‚ÇÅ = (Uniform(700.0, 3000.0), as(Real, 700.0, 3000.0), NoUnits),
        # SEN‚Çò‚Çê‚Çì = (Uniform(1.0, 4.0), as(Real, 1.0, 4.0), NoUnits),
        # Œ±_community_height = (Uniform(0.0, 20000.0), as(Real, 0.0, 20000.0),
        #                       u"kg / ha"),
        # Œ≤_community_height = (Uniform(0.0, 0.01), as(Real, 0.0, 0.01), u"ha / kg"),
        # exp_community_height = (Uniform(0.0, 1.0), as(Real, 0.0, 1.0), NoUnits),
        # height_strength_exp = (Uniform(0.0, 5.0), as(Real, 0.0, 5.0), NoUnits),
        # mowing_mid_days = (truncated(Normal(10.0, 30.0); lower = 0.0, upper = 60.0),
        #                    as(Real, 0.0, 60.0), NoUnits),
        # leafnitrogen_graz_exp = (Uniform(0.0, 5.0), as(Real, 0.0, 5.0), NoUnits),
        # trampling_factor = (truncated(Normal(0.0, 0.05); lower = 0.0), as‚Ñù‚Çä, u"ha"),
        # trampling_height_exp = (Uniform(0.0, 3.0), as(Real, 0.0, 3.0), NoUnits),
        # grazing_half_factor = (truncated(Normal(500.0, 500.0); lower = 0.0, upper = 1000.0),
        #                        as(Real, 0.0, 1000.0), NoUnits),
        # Œ∫ = (Uniform(12.0, 22.5), as(Real, 12.0, 22.5), u"kg/d"),
        # lowbiomass = (Uniform(0.0, 500.0), as(Real, 0.0, 500.0), u"kg/ha"),
        # lowbiomass_k = (Uniform(0.0, 5.0), as(Real, 0.0, 5.0), u"ha/kg"),
        # biomass_dens = (truncated(Normal(1000.0, 1000.0); lower = 0.0), as‚Ñù‚Çä, u"kg/ha"),
        # belowground_density_effect = (truncated(Normal(1.0, 0.5); lower = 0.0),
        #                               as‚Ñù‚Çä, NoUnits),
        # Œ±_pet = (Uniform(0.0, 5.0), as(Real, 0.0, 5.0), u"mm/d"),
        # Œ≤_pet = (truncated(Normal(1.0, 1.0); lower = 0.0), as‚Ñù‚Çä, u"d/mm"),
        # sla_tr = (truncated(Normal(0.02, 0.01); lower = 0.0), as‚Ñù‚Çä, u"m^2/g"),
        # sla_tr_exponent = (truncated(Normal(1.0, 5.0); lower = 0.0), as‚Ñù‚Çä, NoUnits),
        # œï_sla = (Uniform(0.01, 0.03), as(Real, 0.01, 0.03), u"m^2/g"),
        # Œ∑_min_sla = (Uniform(-1.0, 1.0), as(Real, -1.0, 1.0), NoUnits),
        # Œ∑_max_sla = (Uniform(-1.0, 1.0), as(Real, -1.0, 1.0), NoUnits),
        # Œ≤_Œ∑_sla = (Uniform(0.0, 500.0), as(Real, 0.0, 500.0), u"g/m^2"),
        # Œ≤_sla = (Uniform(0.0, 50.0), as(Real, 0.0, 50.0), NoUnits),
        # Œ¥_wrsa = (Uniform(0.0, 1.0), asùïÄ, NoUnits),
        # Œ¥_sla = (Uniform(0.0, 1.0), asùïÄ, NoUnits),
        # œï_amc = (Uniform(0.1, 0.5), as(Real, 0.1, 0.5), NoUnits),
        # Œ∑_min_amc = (Uniform(-1.0, 1.0), as(Real, -1.0, 1.0), NoUnits),
        # Œ∑_max_amc = (Uniform(-1.0, 1.0), as(Real, -1.0, 1.0), NoUnits),
        # Œ∫_min_amc = (Uniform(0.0, 1.0), asùïÄ, NoUnits),
        # Œ≤_Œ∫Œ∑_amc = (Uniform(0.0, 250.0), as(Real, 0.0, 250.0), NoUnits),
        # Œ≤_amc = (Uniform(0.0, 50.0), as(Real, 0.0, 50.0), NoUnits),
        # Œ¥_amc = (Uniform(0.0, 1.0), asùïÄ, NoUnits),
        # Œ¥_nrsa = (Uniform(0.0, 1.0), asùïÄ, NoUnits),
        # œï_rsa = (Uniform(0.1, 0.25), as(Real, 0.1, 0.25), u"m^2/g"),
        # Œ∑_min_rsa = (Uniform(-1.0, 1.0), as(Real, -1.0, 1.0), NoUnits),
        # Œ∑_max_rsa =(Uniform(-1.0, 1.0), as(Real, -1.0, 1.0), NoUnits),
        # Œ∫_min_rsa = (Uniform(0.0, 1.0), asùïÄ, NoUnits),
        # Œ≤_Œ∫Œ∑_rsa = (Uniform(0.0, 250.0), as(Real, 0.0, 250.0), u"g/m^2"),
        # Œ≤_rsa = (Uniform(0.0, 50.0), as(Real, 0.0, 50.0), NoUnits),
        # b_biomass = (truncated(Cauchy(0, 300); lower = 0.0), as‚Ñù‚Çä, NoUnits),
        # b_sla = (truncated(Cauchy(0, 0.05); lower = 0.0), as‚Ñù‚Çä, NoUnits),
        # b_lncm = (truncated(Cauchy(0, 0.5); lower = 0.0), as‚Ñù‚Çä, NoUnits),
        # b_amc = (truncated(Cauchy(0, 30); lower = 0.0), as‚Ñù‚Çä, NoUnits),
        # b_height = (truncated(Cauchy(0, 1); lower = 0.0), as‚Ñù‚Çä, NoUnits),
        # b_rsa_above = (truncated(Cauchy(0, 0.01); lower = 0.0), as‚Ñù‚Çä, NoUnits)
    )


    if !isnothing(input_obj)
        exclude_parameters = exlude_parameter(; input_obj)
        f = collect(keys(p)) .‚àâ Ref(exclude_parameters)
        p = (; zip(keys(p)[f], collect(p)[f])...)
    end

    prior_vec = first.(collect(p))
    lb = quantile.(prior_vec, 0.001)
    ub = quantile.(prior_vec, 0.95)


    lb = (; zip(keys(p), lb)...)
    ub = (; zip(keys(p), ub)...)
    priordists = (; zip(keys(p), prior_vec)...)
    units = (; zip(keys(p), last.(collect(p)))...)
    t = as((; zip(keys(p), getindex.(collect(p), 2))...))

    return (; priordists, lb, ub, t, units)
end

@with_kw mutable struct Parameter{T, Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10, Q11, Q12, Q13, Q14, Q15, Q16, Q17, Q18}
    RUE_max::Q1 = F(3 / 1000) * u"kg / MJ" # Maximum radiation use efficiency
    k::T = F(0.6)    # Extinction coefficientw)
    Œ±_sen::Q2 = F(0.0002)u"d^-1"
    Œ≤_sen::T = F(0.03) # senescence rate
    Œ±_ll::T = F(2.41)  # specific leaf area --> leaf lifespan
    Œ≤_ll::T = F(0.38)  # specific leaf area --> leaf lifespan
    Œ®‚ÇÅ::T = F(775.0)     # temperature threshold: senescence starts to increase
    Œ®‚ÇÇ::T = F(3000.0)    # temperature threshold: senescence reaches maximum
    SEN‚Çò‚Çê‚Çì::T = F(3.0)  # maximal seasonality factor for the senescence rate
    clonalgrowth_factor::T = F(0.05)
    Œ≥1::Q3 = F(0.0445)u"m^2 * d / MJ"
    Œ≥2::Q4 = F(5.0)u"MJ / (m^2 * d)"
    T‚ÇÄ::T = F(3.0)  #u"¬∞C"
    T‚ÇÅ::T = F(12.0) #u"¬∞C"
    T‚ÇÇ::T = F(20.0) #u"¬∞C"
    T‚ÇÉ::T = F(35.0) #u"¬∞C"
    SEA‚Çò·µ¢‚Çô::T = F(0.7)
    SEA‚Çò‚Çê‚Çì::T = F(1.3)
    ST‚ÇÅ::T = F(625.0)
    ST‚ÇÇ::T = F(1300.0)
    Œ±_community_height::Q5 = F(10000.0)u"kg / ha "
    Œ≤_community_height::Q6 = F(0.0005)u"ha / kg"
    exp_community_height::T = F(0.9)
    height_strength_exp::T = F(0.5) # strength of height competition
    mowing_mid_days::T = F(10.0) # day where the plants are grown back to their normal size/2
    mowfactor_Œ≤::T = F(0.05)
    leafnitrogen_graz_exp::T = F(1.5) # exponent of the leaf nitrogen grazing effect
    trampling_factor::Q7 = F(0.01)u"ha" # trampling factor
    trampling_height_exp::T = F(0.5)
    grazing_half_factor::T = F(500.0) # half saturation constant for grazing
    Œ∫::Q8 = F(22.0)u"kg / d" # maximum grazing rate
    lowbiomass::Q9 = F(100.0)u"kg / ha" # low biomass
    lowbiomass_k::Q10= F(1.0)u"ha / kg" # low biomass k
    biomass_dens::Q11 = F(1200.0)u"kg / ha" # biomass density
    belowground_density_effect::T = F(2.0) # effect of belowground competition
    Œ±_pet::Q12 = F(2.0)u"mm / d"
    Œ≤_pet::Q13 = F(1.2)u"d / mm"
    sla_tr::Q14 = F(0.03)u"m^2 / g"
    sla_tr_exponent::T = F(0.4)
    œï_sla::Q15 = F(0.025)u"m^2 / g"
    Œ∑_min_sla::T = F(-0.8)
    Œ∑_max_sla::T = F(0.8)
    Œ≤_Œ∑_sla::Q16 = F(75.0)u"g / m^2"
    Œ≤_sla::T = F(5.0)
    Œ¥_wrsa::T = F(0.8)
    Œ¥_sla::T = F(0.5)
    maxtotalN::T = F(35.0)
    œï_amc::T = F(0.35)
    Œ∑_min_amc::T = F(0.05)
    Œ∑_max_amc::T = F(0.6)
    Œ∫_min_amc::T = F(0.2)
    Œ≤_Œ∫Œ∑_amc::T = F(10.0)
    Œ≤_amc::T = F(7.0)
    Œ¥_amc::T = F(0.8)
    Œ¥_nrsa::T = F(0.5)
    œï_rsa::Q17 = F(0.12)u"m^2 / g"
    Œ∑_min_rsa::T = F(0.05)
    Œ∑_max_rsa::T = F(0.6)
    Œ∫_min_rsa::T = F(0.4)
    Œ≤_Œ∫Œ∑_rsa::Q18 = F(40.0)u"g / m^2"
    Œ≤_rsa::T = F(7.0)
    b_biomass::T = F(1000.0)
    b_sla::T = F(0.0005)
    b_lncm::T = F(0.5)
    b_amc::T = F(0.001)
    b_height::T = F(0.01)
    b_rsa_above::T = F(0.004)
end


F = Float64
function Parameter(dual_type)
    global F = dual_type
    p = Parameter()
    global F = Float64

    return p
end

Base.getindex(obj::Parameter, k) = getfield(obj, k)
Base.setindex!(obj::Parameter, val, k) = setfield!(obj, k, val)



function fixed_parameter(; input_obj)
    p = (
        RUE_max = 3 / 1000 * u"kg / MJ", # Maximum radiation use efficiency
        k = 0.6,    # Extinction coefficientw)
        Œ±_sen = 0.0002u"d^-1",
        Œ≤_sen = 0.03, # senescence rate
        Œ±_ll = 2.41,  # specific leaf area --> leaf lifespan
        Œ≤_ll = 0.38,  # specific leaf area --> leaf lifespan
        Œ®‚ÇÅ = 775.0,     # temperature threshold: senescence starts to increase
        Œ®‚ÇÇ = 3000.0,    # temperature threshold: senescence reaches maximum
        SEN‚Çò‚Çê‚Çì = 3.0,  # maximal seasonality factor for the senescence rate
        clonalgrowth_factor = 0.05,
        Œ≥1 = 0.0445u"m^2 * d / MJ",
        Œ≥2 = 5.0u"MJ / (m^2 * d)",
        T‚ÇÄ = 3,  #u"¬∞C"
        T‚ÇÅ = 12, #u"¬∞C"
        T‚ÇÇ = 20, #u"¬∞C"
        T‚ÇÉ = 35, #u"¬∞C"
        SEA‚Çò·µ¢‚Çô = 0.7,
        SEA‚Çò‚Çê‚Çì = 1.3,
        ST‚ÇÅ = 625,
        ST‚ÇÇ = 1300,
        Œ±_community_height = 10000.0u"kg / ha",
        Œ≤_community_height = 0.0005u"ha / kg",
        exp_community_height = 0.9,
        height_strength_exp = 0.5, # strength of height competition
        mowing_mid_days = 10.0, # day where the plants are grown back to their normal size/2
        mowfactor_Œ≤ = 0.05,
        leafnitrogen_graz_exp = 1.5, # exponent of the leaf nitrogen grazing effect
        trampling_factor = 0.01u"ha", # trampling factor
        trampling_height_exp = 0.5,
        grazing_half_factor = 500.0, # half saturation constant for grazing
        Œ∫ = 22.0u"kg / d", # maximum grazing rate
        lowbiomass = 100.0u"kg / ha", # low biomass
        lowbiomass_k = 1.0u"ha / kg", # low biomass k
        biomass_dens = 1200.0u"kg / ha", # biomass density
        belowground_density_effect = 2.0, # effect of belowground competition
        Œ±_pet = 2.0u"mm / d",
        Œ≤_pet = 1.2u"d / mm",
        sla_tr = 0.03u"m^2 / g",
        sla_tr_exponent = 0.4,
        œï_sla = 0.025u"m^2 / g",
        Œ∑_min_sla = -0.8,
        Œ∑_max_sla = 0.8,
        Œ≤_Œ∑_sla = 75.0u"g / m^2",
        Œ≤_sla = 5.0,
        Œ¥_wrsa = 0.8,
        Œ¥_sla = 0.5,
        maxtotalN = 35.0,
        œï_amc = 0.35,
        Œ∑_min_amc = 0.05,
        Œ∑_max_amc = 0.6,
        Œ∫_min_amc = 0.2,
        Œ≤_Œ∫Œ∑_amc = 10.0,
        Œ≤_amc = 7.0,
        Œ¥_amc = 0.8,
        Œ¥_nrsa = 0.5,
        œï_rsa = 0.12u"m^2 / g",
        Œ∑_min_rsa = 0.05,
        Œ∑_max_rsa = 0.6,
        Œ∫_min_rsa = 0.4,
        Œ≤_Œ∫Œ∑_rsa = 40.0u"g / m^2",
        Œ≤_rsa = 7.0,
        b_biomass = 1000.0,
        b_sla = 0.0005,
        b_lncm = 0.5,
        b_amc = 0.001,
        b_height = 0.01,
        b_rsa_above = 0.004
    )


    return p
    # exclude_parameters = exlude_parameter(; input_obj)
    # f = collect(keys(p)) .‚àâ Ref(exclude_parameters)

    # return (; zip(keys(p)[f], collect(p)[f])...)
end


function parameter(; input_obj, variable_p = ())
    p = fixed_parameter(; input_obj)
    for k in keys(variable_p)
        p = @set p[k] = variable_p[k]
    end

    return p
end

function parameter(p; input_obj, variable_p = (), inference_obj)
    # for k in keys(variable_p)
    #     p = @set p[k] = variable_p[k] * inference_obj.units[k]
    # end
    @show "hwlloasd"
    return p
end

function add_units(x; inference_obj)
    for p in keys(x)
        x = @set x[p] = x[p] * inference_obj.units[p]
    end

    return x
end

# function add_units(x, y::T; inference_obj) where {T}
#     for p in keys(x)
#         x = @set x[p] = x[p] * inference_obj.units[p]
#     end
#     @show eltype(y)
#     return x::T
# end

function init_parameter(; input_obj, inference_obj)
    fixed_p = fixed_parameter(; input_obj)
    f = collect(keys(fixed_p)) .‚àà Ref(keys(inference_obj.units))
    return (; zip(collect(keys(fixed_p))[f], ustrip.(collect(fixed_p)[f]))...)
end
